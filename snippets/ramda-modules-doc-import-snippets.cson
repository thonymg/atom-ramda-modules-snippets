'.source.js.jsx':
  '__ :: ' :
    'prefix': 'rai____doc'
    'body': """
    import __ from 'ramda/__';

    """
  'Add :: Number -> Number -> Number' :
    'prefix': 'rai_add_doc'
    'body': """
    //Add :: Number -> Number -> Number
    import Add from 'ramda/add';

    """
  'Adjust :: (a -> a) -> Number -> [a] -> [a]' :
    'prefix': 'rai_adjust_doc'
    'body': """
    //Adjust :: (a -> a) -> Number -> [a] -> [a]
    import Adjust from 'ramda/adjust';

    """
  'All :: (a -> Boolean) -> [a] -> Boolean' :
    'prefix': 'rai_all_doc'
    'body': """
    //All :: (a -> Boolean) -> [a] -> Boolean
    import All from 'ramda/all';

    """
  'Always :: a -> (* -> a)' :
    'prefix': 'rai_always_doc'
    'body': """
    //Always :: a -> (* -> a)
    import Always from 'ramda/always';

    """
  'And :: * -> * -> *' :
    'prefix': 'rai_and_doc'
    'body': """
    //And :: * -> * -> *
    import And from 'ramda/and';

    """
  'Any :: (a -> Boolean) -> [a] -> Boolean' :
    'prefix': 'rai_any_doc'
    'body': """
    //Any :: (a -> Boolean) -> [a] -> Boolean
    import Any from 'ramda/any';

    """
  'Aperture :: Number -> [a] -> [[a]]' :
    'prefix': 'rai_aperture_doc'
    'body': """
    //Aperture :: Number -> [a] -> [[a]]
    import Aperture from 'ramda/aperture';

    """
  'Append :: a -> [a] -> [a]' :
    'prefix': 'rai_append_doc'
    'body': """
    //Append :: a -> [a] -> [a]
    import Append from 'ramda/append';

    """
  'Apply :: (*... -> a) -> [*] -> a' :
    'prefix': 'rai_apply_doc'
    'body': """
    //Apply :: (*... -> a) -> [*] -> a
    import Apply from 'ramda/apply';

    """
  'Assoc :: String -> a -> {k: v} -> {k: v}' :
    'prefix': 'rai_assoc_doc'
    'body': """
    //Assoc :: String -> a -> {k: v} -> {k: v}
    import Assoc from 'ramda/assoc';

    """
  'AssocPath :: [String] -> a -> {k: v} -> {k: v}' :
    'prefix': 'rai_assocPath_doc'
    'body': """
    //AssocPath :: [String] -> a -> {k: v} -> {k: v}
    import AssocPath from 'ramda/assocPath';

    """
  'Bind :: (* -> *) -> {*} -> (* -> *)' :
    'prefix': 'rai_bind_doc'
    'body': """
    //Bind :: (* -> *) -> {*} -> (* -> *)
    import Bind from 'ramda/bind';

    """
  'Clamp :: Ord a => a -> a -> a -> a' :
    'prefix': 'rai_clamp_doc'
    'body': """
    //Clamp :: Ord a => a -> a -> a -> a
    import Clamp from 'ramda/clamp';

    """
  'Comparator :: (a, b -> Boolean) -> (a, b -> Number)' :
    'prefix': 'rai_comparator_doc'
    'body': """
    //Comparator :: (a, b -> Boolean) -> (a, b -> Number)
    import Comparator from 'ramda/comparator';

    """
  'CurryN :: Number -> (* -> a) -> (* -> a)' :
    'prefix': 'rai_curryN_doc'
    'body': """
    //CurryN :: Number -> (* -> a) -> (* -> a)
    import CurryN from 'ramda/curryN';

    """
  'Dec :: Number -> Number' :
    'prefix': 'rai_dec_doc'
    'body': """
    //Dec :: Number -> Number
    import Dec from 'ramda/dec';

    """
  'DefaultTo :: a -> b -> a | b' :
    'prefix': 'rai_defaultTo_doc'
    'body': """
    //DefaultTo :: a -> b -> a | b
    import DefaultTo from 'ramda/defaultTo';

    """
  'DifferenceWith :: (a -> a -> Boolean) -> [*] -> [*] -> [*]' :
    'prefix': 'rai_differenceWith_doc'
    'body': """
    //DifferenceWith :: (a -> a -> Boolean) -> [*] -> [*] -> [*]
    import DifferenceWith from 'ramda/differenceWith';

    """
  'Dissoc :: String -> {k: v} -> {k: v}' :
    'prefix': 'rai_dissoc_doc'
    'body': """
    //Dissoc :: String -> {k: v} -> {k: v}
    import Dissoc from 'ramda/dissoc';

    """
  'DissocPath :: [String] -> {k: v} -> {k: v}' :
    'prefix': 'rai_dissocPath_doc'
    'body': """
    //DissocPath :: [String] -> {k: v} -> {k: v}
    import DissocPath from 'ramda/dissocPath';

    """
  'Divide :: Number -> Number -> Number' :
    'prefix': 'rai_divide_doc'
    'body': """
    //Divide :: Number -> Number -> Number
    import Divide from 'ramda/divide';

    """
  'DropWhile :: (a -> Boolean) -> [a] -> [a]' :
    'prefix': 'rai_dropWhile_doc'
    'body': """
    //DropWhile :: (a -> Boolean) -> [a] -> [a]
    import DropWhile from 'ramda/dropWhile';

    """
  'Empty :: a -> a' :
    'prefix': 'rai_empty_doc'
    'body': """
    //Empty :: a -> a
    import Empty from 'ramda/empty';

    """
  'Evolve :: {k: (v -> v)} -> {k: v} -> {k: v}' :
    'prefix': 'rai_evolve_doc'
    'body': """
    //Evolve :: {k: (v -> v)} -> {k: v} -> {k: v}
    import Evolve from 'ramda/evolve';

    """
  'Find :: (a -> Boolean) -> [a] -> a | undefined' :
    'prefix': 'rai_find_doc'
    'body': """
    //Find :: (a -> Boolean) -> [a] -> a | undefined
    import Find from 'ramda/find';

    """
  'FindIndex :: (a -> Boolean) -> [a] -> Number' :
    'prefix': 'rai_findIndex_doc'
    'body': """
    //FindIndex :: (a -> Boolean) -> [a] -> Number
    import FindIndex from 'ramda/findIndex';

    """
  'FindLast :: (a -> Boolean) -> [a] -> a | undefined' :
    'prefix': 'rai_findLast_doc'
    'body': """
    //FindLast :: (a -> Boolean) -> [a] -> a | undefined
    import FindLast from 'ramda/findLast';

    """
  'FindLastIndex :: (a -> Boolean) -> [a] -> Number' :
    'prefix': 'rai_findLastIndex_doc'
    'body': """
    //FindLastIndex :: (a -> Boolean) -> [a] -> Number
    import FindLastIndex from 'ramda/findLastIndex';

    """
  'ForEach :: (a -> *) -> [a] -> [a]' :
    'prefix': 'rai_forEach_doc'
    'body': """
    //ForEach :: (a -> *) -> [a] -> [a]
    import ForEach from 'ramda/forEach';

    """
  'FromPairs :: [[k,v]] -> {k: v}' :
    'prefix': 'rai_fromPairs_doc'
    'body': """
    //FromPairs :: [[k,v]] -> {k: v}
    import FromPairs from 'ramda/fromPairs';

    """
  'GroupWith :: (a, a -> Boolean) -> [a] -> [[a]]' :
    'prefix': 'rai_groupWith_doc'
    'body': """
    //GroupWith :: (a, a -> Boolean) -> [a] -> [[a]]
    import GroupWith from 'ramda/groupWith';

    """
  'Gt :: Ord a => a -> a -> Boolean' :
    'prefix': 'rai_gt_doc'
    'body': """
    //Gt :: Ord a => a -> a -> Boolean
    import Gt from 'ramda/gt';

    """
  'Gte :: Ord a => a -> a -> Boolean' :
    'prefix': 'rai_gte_doc'
    'body': """
    //Gte :: Ord a => a -> a -> Boolean
    import Gte from 'ramda/gte';

    """
  'Has :: s -> {s: x} -> Boolean' :
    'prefix': 'rai_has_doc'
    'body': """
    //Has :: s -> {s: x} -> Boolean
    import Has from 'ramda/has';

    """
  'HasIn :: s -> {s: x} -> Boolean' :
    'prefix': 'rai_hasIn_doc'
    'body': """
    //HasIn :: s -> {s: x} -> Boolean
    import HasIn from 'ramda/hasIn';

    """
  'Identical :: a -> a -> Boolean' :
    'prefix': 'rai_identical_doc'
    'body': """
    //Identical :: a -> a -> Boolean
    import Identical from 'ramda/identical';

    """
  'Identity :: a -> a' :
    'prefix': 'rai_identity_doc'
    'body': """
    //Identity :: a -> a
    import Identity from 'ramda/identity';

    """
  'IfElse :: (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)' :
    'prefix': 'rai_ifElse_doc'
    'body': """
    //IfElse :: (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)
    import IfElse from 'ramda/ifElse';

    """
  'Inc :: Number -> Number' :
    'prefix': 'rai_inc_doc'
    'body': """
    //Inc :: Number -> Number
    import Inc from 'ramda/inc';

    """
  'Insert :: Number -> a -> [a] -> [a]' :
    'prefix': 'rai_insert_doc'
    'body': """
    //Insert :: Number -> a -> [a] -> [a]
    import Insert from 'ramda/insert';

    """
  'InsertAll :: Number -> [a] -> [a] -> [a]' :
    'prefix': 'rai_insertAll_doc'
    'body': """
    //InsertAll :: Number -> [a] -> [a] -> [a]
    import InsertAll from 'ramda/insertAll';

    """
  'Intersperse :: a -> [a] -> [a]' :
    'prefix': 'rai_intersperse_doc'
    'body': """
    //Intersperse :: a -> [a] -> [a]
    import Intersperse from 'ramda/intersperse';

    """
  'Is :: (* -> {*}) -> a -> Boolean' :
    'prefix': 'rai_is_doc'
    'body': """
    //Is :: (* -> {*}) -> a -> Boolean
    import Is from 'ramda/is';

    """
  'IsArrayLike :: * -> Boolean' :
    'prefix': 'rai_isArrayLike_doc'
    'body': """
    //IsArrayLike :: * -> Boolean
    import IsArrayLike from 'ramda/isArrayLike';

    """
  'IsNil :: * -> Boolean' :
    'prefix': 'rai_isNil_doc'
    'body': """
    //IsNil :: * -> Boolean
    import IsNil from 'ramda/isNil';

    """
  'Keys :: {k: v} -> [k]' :
    'prefix': 'rai_keys_doc'
    'body': """
    //Keys :: {k: v} -> [k]
    import Keys from 'ramda/keys';

    """
  'KeysIn :: {k: v} -> [k]' :
    'prefix': 'rai_keysIn_doc'
    'body': """
    //KeysIn :: {k: v} -> [k]
    import KeysIn from 'ramda/keysIn';

    """
  'Length :: [a] -> Number' :
    'prefix': 'rai_length_doc'
    'body': """
    //Length :: [a] -> Number
    import Length from 'ramda/length';

    """
  'Lt :: Ord a => a -> a -> Boolean' :
    'prefix': 'rai_lt_doc'
    'body': """
    //Lt :: Ord a => a -> a -> Boolean
    import Lt from 'ramda/lt';

    """
  'Lte :: Ord a => a -> a -> Boolean' :
    'prefix': 'rai_lte_doc'
    'body': """
    //Lte :: Ord a => a -> a -> Boolean
    import Lte from 'ramda/lte';

    """
  'MapAccum :: (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])' :
    'prefix': 'rai_mapAccum_doc'
    'body': """
    //MapAccum :: (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])
    import MapAccum from 'ramda/mapAccum';

    """
  'MapAccumRight :: (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])' :
    'prefix': 'rai_mapAccumRight_doc'
    'body': """
    //MapAccumRight :: (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])
    import MapAccumRight from 'ramda/mapAccumRight';

    """
  'Match :: RegExp -> String -> [String | Undefined]' :
    'prefix': 'rai_match_doc'
    'body': """
    //Match :: RegExp -> String -> [String | Undefined]
    import Match from 'ramda/match';

    """
  'MathMod :: Number -> Number -> Number' :
    'prefix': 'rai_mathMod_doc'
    'body': """
    //MathMod :: Number -> Number -> Number
    import MathMod from 'ramda/mathMod';

    """
  'Max :: Ord a => a -> a -> a' :
    'prefix': 'rai_max_doc'
    'body': """
    //Max :: Ord a => a -> a -> a
    import Max from 'ramda/max';

    """
  'MaxBy :: Ord b => (a -> b) -> a -> a -> a' :
    'prefix': 'rai_maxBy_doc'
    'body': """
    //MaxBy :: Ord b => (a -> b) -> a -> a -> a
    import MaxBy from 'ramda/maxBy';

    """
  'Merge :: {k: v} -> {k: v} -> {k: v}' :
    'prefix': 'rai_merge_doc'
    'body': """
    //Merge :: {k: v} -> {k: v} -> {k: v}
    import Merge from 'ramda/merge';

    """
  'MergeAll :: [{k: v}] -> {k: v}' :
    'prefix': 'rai_mergeAll_doc'
    'body': """
    //MergeAll :: [{k: v}] -> {k: v}
    import MergeAll from 'ramda/mergeAll';

    """
  'MergeWithKey :: (String -> a -> a -> a) -> {a} -> {a} -> {a}' :
    'prefix': 'rai_mergeWithKey_doc'
    'body': """
    //MergeWithKey :: (String -> a -> a -> a) -> {a} -> {a} -> {a}
    import MergeWithKey from 'ramda/mergeWithKey';

    """
  'Min :: Ord a => a -> a -> a' :
    'prefix': 'rai_min_doc'
    'body': """
    //Min :: Ord a => a -> a -> a
    import Min from 'ramda/min';

    """
  'MinBy :: Ord b => (a -> b) -> a -> a -> a' :
    'prefix': 'rai_minBy_doc'
    'body': """
    //MinBy :: Ord b => (a -> b) -> a -> a -> a
    import MinBy from 'ramda/minBy';

    """
  'Modulo :: Number -> Number -> Number' :
    'prefix': 'rai_modulo_doc'
    'body': """
    //Modulo :: Number -> Number -> Number
    import Modulo from 'ramda/modulo';

    """
  'Multiply :: Number -> Number -> Number' :
    'prefix': 'rai_multiply_doc'
    'body': """
    //Multiply :: Number -> Number -> Number
    import Multiply from 'ramda/multiply';

    """
  'NAry :: Number -> (* -> a) -> (* -> a)' :
    'prefix': 'rai_nAry_doc'
    'body': """
    //NAry :: Number -> (* -> a) -> (* -> a)
    import NAry from 'ramda/nAry';

    """
  'Negate :: Number -> Number' :
    'prefix': 'rai_negate_doc'
    'body': """
    //Negate :: Number -> Number
    import Negate from 'ramda/negate';

    """
  'None :: (a -> Boolean) -> [a] -> Boolean' :
    'prefix': 'rai_none_doc'
    'body': """
    //None :: (a -> Boolean) -> [a] -> Boolean
    import None from 'ramda/none';

    """
  'Not :: * -> Boolean' :
    'prefix': 'rai_not_doc'
    'body': """
    //Not :: * -> Boolean
    import Not from 'ramda/not';

    """
  'Nth :: Number -> [a] -> a | Undefined' :
    'prefix': 'rai_nth_doc'
    'body': """
    //Nth :: Number -> [a] -> a | Undefined
    import Nth from 'ramda/nth';

    """
  'NthArg :: Number -> *... -> *' :
    'prefix': 'rai_nthArg_doc'
    'body': """
    //NthArg :: Number -> *... -> *
    import NthArg from 'ramda/nthArg';

    """
  'ObjOf :: String -> a -> {String:a}' :
    'prefix': 'rai_objOf_doc'
    'body': """
    //ObjOf :: String -> a -> {String:a}
    import ObjOf from 'ramda/objOf';

    """
  'Of :: a -> [a]' :
    'prefix': 'rai_of_doc'
    'body': """
    //Of :: a -> [a]
    import Of from 'ramda/of';

    """
  'Once :: (a... -> b) -> (a... -> b)' :
    'prefix': 'rai_once_doc'
    'body': """
    //Once :: (a... -> b) -> (a... -> b)
    import Once from 'ramda/once';

    """
  'Or :: * -> * -> *' :
    'prefix': 'rai_or_doc'
    'body': """
    //Or :: * -> * -> *
    import Or from 'ramda/or';

    """
  'Over :: Lens s a -> (a -> a) -> s -> s' :
    'prefix': 'rai_over_doc'
    'body': """
    //Over :: Lens s a -> (a -> a) -> s -> s
    import Over from 'ramda/over';

    """
  'Pair :: a -> b -> (a,b)' :
    'prefix': 'rai_pair_doc'
    'body': """
    //Pair :: a -> b -> (a,b)
    import Pair from 'ramda/pair';

    """
  'Path :: [String] -> {k: v} -> v | Undefined' :
    'prefix': 'rai_path_doc'
    'body': """
    //Path :: [String] -> {k: v} -> v | Undefined
    import Path from 'ramda/path';

    """
  'PathOr :: a -> [String] -> Object -> a' :
    'prefix': 'rai_pathOr_doc'
    'body': """
    //PathOr :: a -> [String] -> Object -> a
    import PathOr from 'ramda/pathOr';

    """
  'PathSatisfies :: (a -> Boolean) -> [String] -> Object -> Boolean' :
    'prefix': 'rai_pathSatisfies_doc'
    'body': """
    //PathSatisfies :: (a -> Boolean) -> [String] -> Object -> Boolean
    import PathSatisfies from 'ramda/pathSatisfies';

    """
  'Pick :: [k] -> {k: v} -> {k: v}' :
    'prefix': 'rai_pick_doc'
    'body': """
    //Pick :: [k] -> {k: v} -> {k: v}
    import Pick from 'ramda/pick';

    """
  'PickAll :: [k] -> {k: v} -> {k: v}' :
    'prefix': 'rai_pickAll_doc'
    'body': """
    //PickAll :: [k] -> {k: v} -> {k: v}
    import PickAll from 'ramda/pickAll';

    """
  'PickBy :: (v, k -> Boolean) -> {k: v} -> {k: v}' :
    'prefix': 'rai_pickBy_doc'
    'body': """
    //PickBy :: (v, k -> Boolean) -> {k: v} -> {k: v}
    import PickBy from 'ramda/pickBy';

    """
  'Prepend :: a -> [a] -> [a]' :
    'prefix': 'rai_prepend_doc'
    'body': """
    //Prepend :: a -> [a] -> [a]
    import Prepend from 'ramda/prepend';

    """
  'Prop :: s -> {s: a} -> a | Undefined' :
    'prefix': 'rai_prop_doc'
    'body': """
    //Prop :: s -> {s: a} -> a | Undefined
    import Prop from 'ramda/prop';

    """
  'PropOr :: a -> String -> Object -> a' :
    'prefix': 'rai_propOr_doc'
    'body': """
    //PropOr :: a -> String -> Object -> a
    import PropOr from 'ramda/propOr';

    """
  'PropSatisfies :: (a -> Boolean) -> String -> {String: a} -> Boolean' :
    'prefix': 'rai_propSatisfies_doc'
    'body': """
    //PropSatisfies :: (a -> Boolean) -> String -> {String: a} -> Boolean
    import PropSatisfies from 'ramda/propSatisfies';

    """
  'Props :: [k] -> {k: v} -> [v]' :
    'prefix': 'rai_props_doc'
    'body': """
    //Props :: [k] -> {k: v} -> [v]
    import Props from 'ramda/props';

    """
  'Range :: Number -> Number -> [Number]' :
    'prefix': 'rai_range_doc'
    'body': """
    //Range :: Number -> Number -> [Number]
    import Range from 'ramda/range';

    """
  'ReduceRight :: (a,b -> a) -> a -> [b] -> a' :
    'prefix': 'rai_reduceRight_doc'
    'body': """
    //ReduceRight :: (a,b -> a) -> a -> [b] -> a
    import ReduceRight from 'ramda/reduceRight';

    """
  'Reduced :: a -> *' :
    'prefix': 'rai_reduced_doc'
    'body': """
    //Reduced :: a -> *
    import Reduced from 'ramda/reduced';

    """
  'Remove :: Number -> Number -> [a] -> [a]' :
    'prefix': 'rai_remove_doc'
    'body': """
    //Remove :: Number -> Number -> [a] -> [a]
    import Remove from 'ramda/remove';

    """
  'Replace :: RegExp|String -> String -> String -> String' :
    'prefix': 'rai_replace_doc'
    'body': """
    //Replace :: RegExp|String -> String -> String -> String
    import Replace from 'ramda/replace';

    """
  'Reverse :: [a] -> [a]' :
    'prefix': 'rai_reverse_doc'
    'body': """
    //Reverse :: [a] -> [a]
    import Reverse from 'ramda/reverse';

    """
  'Scan :: (a,b -> a) -> a -> [b] -> [a]' :
    'prefix': 'rai_scan_doc'
    'body': """
    //Scan :: (a,b -> a) -> a -> [b] -> [a]
    import Scan from 'ramda/scan';

    """
  'Set :: Lens s a -> a -> s -> s' :
    'prefix': 'rai_set_doc'
    'body': """
    //Set :: Lens s a -> a -> s -> s
    import Set from 'ramda/set';

    """
  'Slice :: Number -> Number -> [a] -> [a]' :
    'prefix': 'rai_slice_doc'
    'body': """
    //Slice :: Number -> Number -> [a] -> [a]
    import Slice from 'ramda/slice';

    """
  'Sort :: (a,a -> Number) -> [a] -> [a]' :
    'prefix': 'rai_sort_doc'
    'body': """
    //Sort :: (a,a -> Number) -> [a] -> [a]
    import Sort from 'ramda/sort';

    """
  'SortBy :: Ord b => (a -> b) -> [a] -> [a]' :
    'prefix': 'rai_sortBy_doc'
    'body': """
    //SortBy :: Ord b => (a -> b) -> [a] -> [a]
    import SortBy from 'ramda/sortBy';

    """
  'SplitAt :: Number -> [a] -> [[a], [a]]' :
    'prefix': 'rai_splitAt_doc'
    'body': """
    //SplitAt :: Number -> [a] -> [[a], [a]]
    import SplitAt from 'ramda/splitAt';

    """
  'SplitEvery :: Number -> [a] -> [[a]]' :
    'prefix': 'rai_splitEvery_doc'
    'body': """
    //SplitEvery :: Number -> [a] -> [[a]]
    import SplitEvery from 'ramda/splitEvery';

    """
  'SplitWhen :: (a -> Boolean) -> [a] -> [[a], [a]]' :
    'prefix': 'rai_splitWhen_doc'
    'body': """
    //SplitWhen :: (a -> Boolean) -> [a] -> [[a], [a]]
    import SplitWhen from 'ramda/splitWhen';

    """
  'Subtract :: Number -> Number -> Number' :
    'prefix': 'rai_subtract_doc'
    'body': """
    //Subtract :: Number -> Number -> Number
    import Subtract from 'ramda/subtract';

    """
  'Tail :: [a] -> [a]' :
    'prefix': 'rai_tail_doc'
    'body': """
    //Tail :: [a] -> [a]
    import Tail from 'ramda/tail';

    """
  'Take :: Number -> [a] -> [a]' :
    'prefix': 'rai_take_doc'
    'body': """
    //Take :: Number -> [a] -> [a]
    import Take from 'ramda/take';

    """
  'TakeLastWhile :: (a -> Boolean) -> [a] -> [a]' :
    'prefix': 'rai_takeLastWhile_doc'
    'body': """
    //TakeLastWhile :: (a -> Boolean) -> [a] -> [a]
    import TakeLastWhile from 'ramda/takeLastWhile';

    """
  'TakeWhile :: (a -> Boolean) -> [a] -> [a]' :
    'prefix': 'rai_takeWhile_doc'
    'body': """
    //TakeWhile :: (a -> Boolean) -> [a] -> [a]
    import TakeWhile from 'ramda/takeWhile';

    """
  'Tap :: (a -> *) -> a -> a' :
    'prefix': 'rai_tap_doc'
    'body': """
    //Tap :: (a -> *) -> a -> a
    import Tap from 'ramda/tap';

    """
  'Times :: (Number -> a) -> Number -> [a]' :
    'prefix': 'rai_times_doc'
    'body': """
    //Times :: (Number -> a) -> Number -> [a]
    import Times from 'ramda/times';

    """
  'ToPairs :: {String: *} -> [[String,*]]' :
    'prefix': 'rai_toPairs_doc'
    'body': """
    //ToPairs :: {String: *} -> [[String,*]]
    import ToPairs from 'ramda/toPairs';

    """
  'ToPairsIn :: {String: *} -> [[String,*]]' :
    'prefix': 'rai_toPairsIn_doc'
    'body': """
    //ToPairsIn :: {String: *} -> [[String,*]]
    import ToPairsIn from 'ramda/toPairsIn';

    """
  'Transpose :: [[a]] -> [[a]]' :
    'prefix': 'rai_transpose_doc'
    'body': """
    //Transpose :: [[a]] -> [[a]]
    import Transpose from 'ramda/transpose';

    """
  'Trim :: String -> String' :
    'prefix': 'rai_trim_doc'
    'body': """
    //Trim :: String -> String
    import Trim from 'ramda/trim';

    """
  'TryCatch :: (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)' :
    'prefix': 'rai_tryCatch_doc'
    'body': """
    //TryCatch :: (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)
    import TryCatch from 'ramda/tryCatch';

    """
  'Type :: (* -> {*}) -> String' :
    'prefix': 'rai_type_doc'
    'body': """
    //Type :: (* -> {*}) -> String
    import Type from 'ramda/type';

    """
  'Unapply :: ([*...] -> a) -> (*... -> a)' :
    'prefix': 'rai_unapply_doc'
    'body': """
    //Unapply :: ([*...] -> a) -> (*... -> a)
    import Unapply from 'ramda/unapply';

    """
  'Unary :: (* -> b) -> (a -> b)' :
    'prefix': 'rai_unary_doc'
    'body': """
    //Unary :: (* -> b) -> (a -> b)
    import Unary from 'ramda/unary';

    """
  'UncurryN :: Number -> (a -> b) -> (a -> c)' :
    'prefix': 'rai_uncurryN_doc'
    'body': """
    //UncurryN :: Number -> (a -> b) -> (a -> c)
    import UncurryN from 'ramda/uncurryN';

    """
  'Unfold :: (a -> [b]) -> * -> [b]' :
    'prefix': 'rai_unfold_doc'
    'body': """
    //Unfold :: (a -> [b]) -> * -> [b]
    import Unfold from 'ramda/unfold';

    """
  'UniqWith :: (a, a -> Boolean) -> [a] -> [a]' :
    'prefix': 'rai_uniqWith_doc'
    'body': """
    //UniqWith :: (a, a -> Boolean) -> [a] -> [a]
    import UniqWith from 'ramda/uniqWith';

    """
  'Unless :: (a -> Boolean) -> (a -> a) -> a -> a' :
    'prefix': 'rai_unless_doc'
    'body': """
    //Unless :: (a -> Boolean) -> (a -> a) -> a -> a
    import Unless from 'ramda/unless';

    """
  'Until :: (a -> Boolean) -> (a -> a) -> a -> a' :
    'prefix': 'rai_until_doc'
    'body': """
    //Until :: (a -> Boolean) -> (a -> a) -> a -> a
    import Until from 'ramda/until';

    """
  'Update :: Number -> a -> [a] -> [a]' :
    'prefix': 'rai_update_doc'
    'body': """
    //Update :: Number -> a -> [a] -> [a]
    import Update from 'ramda/update';

    """
  'UseWith :: (x1 -> x2 -> ... -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)' :
    'prefix': 'rai_useWith_doc'
    'body': """
    //UseWith :: (x1 -> x2 -> ... -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)
    import UseWith from 'ramda/useWith';

    """
  'Values :: {k: v} -> [v]' :
    'prefix': 'rai_values_doc'
    'body': """
    //Values :: {k: v} -> [v]
    import Values from 'ramda/values';

    """
  'ValuesIn :: {k: v} -> [v]' :
    'prefix': 'rai_valuesIn_doc'
    'body': """
    //ValuesIn :: {k: v} -> [v]
    import ValuesIn from 'ramda/valuesIn';

    """
  'View :: Lens s a -> s -> a' :
    'prefix': 'rai_view_doc'
    'body': """
    //View :: Lens s a -> s -> a
    import View from 'ramda/view';

    """
  'When :: (a -> Boolean) -> (a -> a) -> a -> a' :
    'prefix': 'rai_when_doc'
    'body': """
    //When :: (a -> Boolean) -> (a -> a) -> a -> a
    import When from 'ramda/when';

    """
  'Where :: {String: (* -> Boolean)} -> {String: *} -> Boolean' :
    'prefix': 'rai_where_doc'
    'body': """
    //Where :: {String: (* -> Boolean)} -> {String: *} -> Boolean
    import Where from 'ramda/where';

    """
  'Wrap :: (a... -> b) -> ((a... -> b) -> a... -> c) -> (a... -> c)' :
    'prefix': 'rai_wrap_doc'
    'body': """
    //Wrap :: (a... -> b) -> ((a... -> b) -> a... -> c) -> (a... -> c)
    import Wrap from 'ramda/wrap';

    """
  'Xprod :: [a] -> [b] -> [[a,b]]' :
    'prefix': 'rai_xprod_doc'
    'body': """
    //Xprod :: [a] -> [b] -> [[a,b]]
    import Xprod from 'ramda/xprod';

    """
  'Zip :: [a] -> [b] -> [[a,b]]' :
    'prefix': 'rai_zip_doc'
    'body': """
    //Zip :: [a] -> [b] -> [[a,b]]
    import Zip from 'ramda/zip';

    """
  'ZipObj :: [String] -> [*] -> {String: *}' :
    'prefix': 'rai_zipObj_doc'
    'body': """
    //ZipObj :: [String] -> [*] -> {String: *}
    import ZipObj from 'ramda/zipObj';

    """
  'ZipWith :: (a,b -> c) -> [a] -> [b] -> [c]' :
    'prefix': 'rai_zipWith_doc'
    'body': """
    //ZipWith :: (a,b -> c) -> [a] -> [b] -> [c]
    import ZipWith from 'ramda/zipWith';

    """
  'F :: * -> Boolean' :
    'prefix': 'rai_F_doc'
    'body': """
    //F :: * -> Boolean
    import F from 'ramda/F';

    """
  'T :: * -> Boolean' :
    'prefix': 'rai_T_doc'
    'body': """
    //T :: * -> Boolean
    import T from 'ramda/T';

    """
  'AddIndex :: ((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)' :
    'prefix': 'rai_addIndex_doc'
    'body': """
    //AddIndex :: ((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)
    import AddIndex from 'ramda/addIndex';

    """
  'Binary :: (* -> c) -> (a, b -> c)' :
    'prefix': 'rai_binary_doc'
    'body': """
    //Binary :: (* -> c) -> (a, b -> c)
    import Binary from 'ramda/binary';

    """
  'Clone :: {*} -> {*}' :
    'prefix': 'rai_clone_doc'
    'body': """
    //Clone :: {*} -> {*}
    import Clone from 'ramda/clone';

    """
  'Curry :: (* -> a) -> (* -> a)' :
    'prefix': 'rai_curry_doc'
    'body': """
    //Curry :: (* -> a) -> (* -> a)
    import Curry from 'ramda/curry';

    """
  'Drop :: Number -> [a] -> [a]' :
    'prefix': 'rai_drop_doc'
    'body': """
    //Drop :: Number -> [a] -> [a]
    import Drop from 'ramda/drop';

    """
  'DropLast :: Number -> [a] -> [a]' :
    'prefix': 'rai_dropLast_doc'
    'body': """
    //DropLast :: Number -> [a] -> [a]
    import DropLast from 'ramda/dropLast';

    """
  'DropLastWhile :: (a -> Boolean) -> [a] -> [a]' :
    'prefix': 'rai_dropLastWhile_doc'
    'body': """
    //DropLastWhile :: (a -> Boolean) -> [a] -> [a]
    import DropLastWhile from 'ramda/dropLastWhile';

    """
  'Equals :: a -> b -> Boolean' :
    'prefix': 'rai_equals_doc'
    'body': """
    //Equals :: a -> b -> Boolean
    import Equals from 'ramda/equals';

    """
  'Filter :: Filterable f => (a -> Boolean) -> f a -> f a' :
    'prefix': 'rai_filter_doc'
    'body': """
    //Filter :: Filterable f => (a -> Boolean) -> f a -> f a
    import Filter from 'ramda/filter';

    """
  'Flatten :: [a] -> [b]' :
    'prefix': 'rai_flatten_doc'
    'body': """
    //Flatten :: [a] -> [b]
    import Flatten from 'ramda/flatten';

    """
  'Flip :: (a -> b -> c -> ... -> z) -> (b -> a -> c -> ... -> z)' :
    'prefix': 'rai_flip_doc'
    'body': """
    //Flip :: (a -> b -> c -> ... -> z) -> (b -> a -> c -> ... -> z)
    import Flip from 'ramda/flip';

    """
  'Head :: [a] -> a | Undefined' :
    'prefix': 'rai_head_doc'
    'body': """
    //Head :: [a] -> a | Undefined
    import Head from 'ramda/head';

    """
  'Init :: [a] -> [a]' :
    'prefix': 'rai_init_doc'
    'body': """
    //Init :: [a] -> [a]
    import Init from 'ramda/init';

    """
  'IntersectionWith :: (a -> a -> Boolean) -> [*] -> [*] -> [*]' :
    'prefix': 'rai_intersectionWith_doc'
    'body': """
    //IntersectionWith :: (a -> a -> Boolean) -> [*] -> [*] -> [*]
    import IntersectionWith from 'ramda/intersectionWith';

    """
  'Into :: a -> (b -> b) -> [c] -> a' :
    'prefix': 'rai_into_doc'
    'body': """
    //Into :: a -> (b -> b) -> [c] -> a
    import Into from 'ramda/into';

    """
  'Invert :: {s: x} -> {x: [ s, ... ]}' :
    'prefix': 'rai_invert_doc'
    'body': """
    //Invert :: {s: x} -> {x: [ s, ... ]}
    import Invert from 'ramda/invert';

    """
  'InvertObj :: {s: x} -> {x: s}' :
    'prefix': 'rai_invertObj_doc'
    'body': """
    //InvertObj :: {s: x} -> {x: s}
    import InvertObj from 'ramda/invertObj';

    """
  'IsEmpty :: a -> Boolean' :
    'prefix': 'rai_isEmpty_doc'
    'body': """
    //IsEmpty :: a -> Boolean
    import IsEmpty from 'ramda/isEmpty';

    """
  'Last :: [a] -> a | Undefined' :
    'prefix': 'rai_last_doc'
    'body': """
    //Last :: [a] -> a | Undefined
    import Last from 'ramda/last';

    """
  'LastIndexOf :: a -> [a] -> Number' :
    'prefix': 'rai_lastIndexOf_doc'
    'body': """
    //LastIndexOf :: a -> [a] -> Number
    import LastIndexOf from 'ramda/lastIndexOf';

    """
  'Map :: Functor f => (a -> b) -> f a -> f b' :
    'prefix': 'rai_map_doc'
    'body': """
    //Map :: Functor f => (a -> b) -> f a -> f b
    import Map from 'ramda/map';

    """
  'MapObjIndexed :: ((*, String, Object) -> *) -> Object -> Object' :
    'prefix': 'rai_mapObjIndexed_doc'
    'body': """
    //MapObjIndexed :: ((*, String, Object) -> *) -> Object -> Object
    import MapObjIndexed from 'ramda/mapObjIndexed';

    """
  'MergeWith :: (a -> a -> a) -> {a} -> {a} -> {a}' :
    'prefix': 'rai_mergeWith_doc'
    'body': """
    //MergeWith :: (a -> a -> a) -> {a} -> {a} -> {a}
    import MergeWith from 'ramda/mergeWith';

    """
  'Partial :: ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)' :
    'prefix': 'rai_partial_doc'
    'body': """
    //Partial :: ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)
    import Partial from 'ramda/partial';

    """
  'PartialRight :: ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)' :
    'prefix': 'rai_partialRight_doc'
    'body': """
    //PartialRight :: ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)
    import PartialRight from 'ramda/partialRight';

    """
  'PathEq :: [String] -> * -> {String: *} -> Boolean' :
    'prefix': 'rai_pathEq_doc'
    'body': """
    //PathEq :: [String] -> * -> {String: *} -> Boolean
    import PathEq from 'ramda/pathEq';

    """
  'Pluck :: k -> [{k: v}] -> [v]' :
    'prefix': 'rai_pluck_doc'
    'body': """
    //Pluck :: k -> [{k: v}] -> [v]
    import Pluck from 'ramda/pluck';

    """
  'Project :: [k] -> [{k: v}] -> [{k: v}]' :
    'prefix': 'rai_project_doc'
    'body': """
    //Project :: [k] -> [{k: v}] -> [{k: v}]
    import Project from 'ramda/project';

    """
  'PropEq :: String -> a -> Object -> Boolean' :
    'prefix': 'rai_propEq_doc'
    'body': """
    //PropEq :: String -> a -> Object -> Boolean
    import PropEq from 'ramda/propEq';

    """
  'PropIs :: Type -> String -> Object -> Boolean' :
    'prefix': 'rai_propIs_doc'
    'body': """
    //PropIs :: Type -> String -> Object -> Boolean
    import PropIs from 'ramda/propIs';

    """
  'Reduce :: ((a, b) -> a) -> a -> [b] -> a' :
    'prefix': 'rai_reduce_doc'
    'body': """
    //Reduce :: ((a, b) -> a) -> a -> [b] -> a
    import Reduce from 'ramda/reduce';

    """
  'ReduceBy :: ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}' :
    'prefix': 'rai_reduceBy_doc'
    'body': """
    //ReduceBy :: ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}
    import ReduceBy from 'ramda/reduceBy';

    """
  'Reject :: Filterable f => (a -> Boolean) -> f a -> f a' :
    'prefix': 'rai_reject_doc'
    'body': """
    //Reject :: Filterable f => (a -> Boolean) -> f a -> f a
    import Reject from 'ramda/reject';

    """
  'Repeat :: a -> n -> [a]' :
    'prefix': 'rai_repeat_doc'
    'body': """
    //Repeat :: a -> n -> [a]
    import Repeat from 'ramda/repeat';

    """
  'Sum :: [Number] -> Number' :
    'prefix': 'rai_sum_doc'
    'body': """
    //Sum :: [Number] -> Number
    import Sum from 'ramda/sum';

    """
  'TakeLast :: Number -> [a] -> [a]' :
    'prefix': 'rai_takeLast_doc'
    'body': """
    //TakeLast :: Number -> [a] -> [a]
    import TakeLast from 'ramda/takeLast';

    """
  'Transduce :: (c -> c) -> (a,b -> a) -> a -> [b] -> a' :
    'prefix': 'rai_transduce_doc'
    'body': """
    //Transduce :: (c -> c) -> (a,b -> a) -> a -> [b] -> a
    import Transduce from 'ramda/transduce';

    """
  'UnionWith :: (a -> a -> Boolean) -> [*] -> [*] -> [*]' :
    'prefix': 'rai_unionWith_doc'
    'body': """
    //UnionWith :: (a -> a -> Boolean) -> [*] -> [*] -> [*]
    import UnionWith from 'ramda/unionWith';

    """
  'WhereEq :: {String: *} -> {String: *} -> Boolean' :
    'prefix': 'rai_whereEq_doc'
    'body': """
    //WhereEq :: {String: *} -> {String: *} -> Boolean
    import WhereEq from 'ramda/whereEq';

    """
  'AllPass :: [(*... -> Boolean)] -> (*... -> Boolean)' :
    'prefix': 'rai_allPass_doc'
    'body': """
    //AllPass :: [(*... -> Boolean)] -> (*... -> Boolean)
    import AllPass from 'ramda/allPass';

    """
  'AllUniq :: [a] -> Boolean' :
    'prefix': 'rai_allUniq_doc'
    'body': """
    //AllUniq :: [a] -> Boolean
    import AllUniq from 'ramda/allUniq';

    """
  'AnyPass :: [(*... -> Boolean)] -> (*... -> Boolean)' :
    'prefix': 'rai_anyPass_doc'
    'body': """
    //AnyPass :: [(*... -> Boolean)] -> (*... -> Boolean)
    import AnyPass from 'ramda/anyPass';

    """
  'Ap :: [f] -> [a] -> [f a]' :
    'prefix': 'rai_ap_doc'
    'body': """
    //Ap :: [f] -> [a] -> [f a]
    import Ap from 'ramda/ap';

    """
  'ApplySpec :: {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})' :
    'prefix': 'rai_applySpec_doc'
    'body': """
    //ApplySpec :: {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})
    import ApplySpec from 'ramda/applySpec';

    """
  'Call :: (*... -> a),*... -> a' :
    'prefix': 'rai_call_doc'
    'body': """
    //Call :: (*... -> a),*... -> a
    import Call from 'ramda/call';

    """
  'Chain :: (a -> [b]) -> [a] -> [b]' :
    'prefix': 'rai_chain_doc'
    'body': """
    //Chain :: (a -> [b]) -> [a] -> [b]
    import Chain from 'ramda/chain';

    """
  'Cond :: [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)' :
    'prefix': 'rai_cond_doc'
    'body': """
    //Cond :: [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)
    import Cond from 'ramda/cond';

    """
  'ConstructN :: Number -> (* -> {*}) -> (* -> {*})' :
    'prefix': 'rai_constructN_doc'
    'body': """
    //ConstructN :: Number -> (* -> {*}) -> (* -> {*})
    import ConstructN from 'ramda/constructN';

    """
  'Converge :: (x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1), (a -> b -> ... -> x2), ...] -> (a -> b -> ... -> z)' :
    'prefix': 'rai_converge_doc'
    'body': """
    //Converge :: (x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1), (a -> b -> ... -> x2), ...] -> (a -> b -> ... -> z)
    import Converge from 'ramda/converge';

    """
  'CountBy :: (a -> String) -> [a] -> {*}' :
    'prefix': 'rai_countBy_doc'
    'body': """
    //CountBy :: (a -> String) -> [a] -> {*}
    import CountBy from 'ramda/countBy';

    """
  'DropRepeatsWith :: (a, a -> Boolean) -> [a] -> [a]' :
    'prefix': 'rai_dropRepeatsWith_doc'
    'body': """
    //DropRepeatsWith :: (a, a -> Boolean) -> [a] -> [a]
    import DropRepeatsWith from 'ramda/dropRepeatsWith';

    """
  'EqBy :: (a -> b) -> a -> a -> Boolean' :
    'prefix': 'rai_eqBy_doc'
    'body': """
    //EqBy :: (a -> b) -> a -> a -> Boolean
    import EqBy from 'ramda/eqBy';

    """
  'EqProps :: k -> {k: v} -> {k: v} -> Boolean' :
    'prefix': 'rai_eqProps_doc'
    'body': """
    //EqProps :: k -> {k: v} -> {k: v} -> Boolean
    import EqProps from 'ramda/eqProps';

    """
  'GroupBy :: (a -> String) -> [a] -> {String: [a]}' :
    'prefix': 'rai_groupBy_doc'
    'body': """
    //GroupBy :: (a -> String) -> [a] -> {String: [a]}
    import GroupBy from 'ramda/groupBy';

    """
  'IndexBy :: (a -> String) -> [{k: v}] -> {k: {k: v}}' :
    'prefix': 'rai_indexBy_doc'
    'body': """
    //IndexBy :: (a -> String) -> [{k: v}] -> {k: {k: v}}
    import IndexBy from 'ramda/indexBy';

    """
  'IndexOf :: a -> [a] -> Number' :
    'prefix': 'rai_indexOf_doc'
    'body': """
    //IndexOf :: a -> [a] -> Number
    import IndexOf from 'ramda/indexOf';

    """
  'Juxt :: [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])' :
    'prefix': 'rai_juxt_doc'
    'body': """
    //Juxt :: [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])
    import Juxt from 'ramda/juxt';

    """
  'Lens :: (s -> a) -> ((a, s) -> s) -> Lens s a' :
    'prefix': 'rai_lens_doc'
    'body': """
    //Lens :: (s -> a) -> ((a, s) -> s) -> Lens s a
    import Lens from 'ramda/lens';

    """
  'LensIndex :: Number -> Lens s a' :
    'prefix': 'rai_lensIndex_doc'
    'body': """
    //LensIndex :: Number -> Lens s a
    import LensIndex from 'ramda/lensIndex';

    """
  'LensPath :: [String] -> Lens s a' :
    'prefix': 'rai_lensPath_doc'
    'body': """
    //LensPath :: [String] -> Lens s a
    import LensPath from 'ramda/lensPath';

    """
  'LensProp :: String -> Lens s a' :
    'prefix': 'rai_lensProp_doc'
    'body': """
    //LensProp :: String -> Lens s a
    import LensProp from 'ramda/lensProp';

    """
  'LiftN :: Number -> (*... -> *) -> ([*]... -> [*])' :
    'prefix': 'rai_liftN_doc'
    'body': """
    //LiftN :: Number -> (*... -> *) -> ([*]... -> [*])
    import LiftN from 'ramda/liftN';

    """
  'Mean :: [Number] -> Number' :
    'prefix': 'rai_mean_doc'
    'body': """
    //Mean :: [Number] -> Number
    import Mean from 'ramda/mean';

    """
  'Median :: [Number] -> Number' :
    'prefix': 'rai_median_doc'
    'body': """
    //Median :: [Number] -> Number
    import Median from 'ramda/median';

    """
  'Partition :: Filterable f => (a -> Boolean) -> f a -> [f a, f a]' :
    'prefix': 'rai_partition_doc'
    'body': """
    //Partition :: Filterable f => (a -> Boolean) -> f a -> [f a, f a]
    import Partition from 'ramda/partition';

    """
  'Pipe :: (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)' :
    'prefix': 'rai_pipe_doc'
    'body': """
    //Pipe :: (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)
    import Pipe from 'ramda/pipe';

    """
  'PipeP :: ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)' :
    'prefix': 'rai_pipeP_doc'
    'body': """
    //PipeP :: ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)
    import PipeP from 'ramda/pipeP';

    """
  'Product :: [Number] -> Number' :
    'prefix': 'rai_product_doc'
    'body': """
    //Product :: [Number] -> Number
    import Product from 'ramda/product';

    """
  'Sequence :: (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)' :
    'prefix': 'rai_sequence_doc'
    'body': """
    //Sequence :: (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)
    import Sequence from 'ramda/sequence';

    """
  'Traverse :: (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)' :
    'prefix': 'rai_traverse_doc'
    'body': """
    //Traverse :: (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)
    import Traverse from 'ramda/traverse';

    """
  'Unnest :: Chain c => c (c a) -> c a' :
    'prefix': 'rai_unnest_doc'
    'body': """
    //Unnest :: Chain c => c (c a) -> c a
    import Unnest from 'ramda/unnest';

    """
  'Compose :: ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)' :
    'prefix': 'rai_compose_doc'
    'body': """
    //Compose :: ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)
    import Compose from 'ramda/compose';

    """
  'ComposeK :: Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (m a -> m z)' :
    'prefix': 'rai_composeK_doc'
    'body': """
    //ComposeK :: Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (m a -> m z)
    import ComposeK from 'ramda/composeK';

    """
  'ComposeP :: ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)' :
    'prefix': 'rai_composeP_doc'
    'body': """
    //ComposeP :: ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)
    import ComposeP from 'ramda/composeP';

    """
  'Construct :: (* -> {*}) -> (* -> {*})' :
    'prefix': 'rai_construct_doc'
    'body': """
    //Construct :: (* -> {*}) -> (* -> {*})
    import Construct from 'ramda/construct';

    """
  'Contains :: a -> [a] -> Boolean' :
    'prefix': 'rai_contains_doc'
    'body': """
    //Contains :: a -> [a] -> Boolean
    import Contains from 'ramda/contains';

    """
  'Difference :: [*] -> [*] -> [*]' :
    'prefix': 'rai_difference_doc'
    'body': """
    //Difference :: [*] -> [*] -> [*]
    import Difference from 'ramda/difference';

    """
  'DropRepeats :: [a] -> [a]' :
    'prefix': 'rai_dropRepeats_doc'
    'body': """
    //DropRepeats :: [a] -> [a]
    import DropRepeats from 'ramda/dropRepeats';

    """
  'Lift :: (*... -> *) -> ([*]... -> [*])' :
    'prefix': 'rai_lift_doc'
    'body': """
    //Lift :: (*... -> *) -> ([*]... -> [*])
    import Lift from 'ramda/lift';

    """
  'Omit :: [String] -> {String: *} -> {String: *}' :
    'prefix': 'rai_omit_doc'
    'body': """
    //Omit :: [String] -> {String: *} -> {String: *}
    import Omit from 'ramda/omit';

    """
  'PipeK :: Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (m a -> m z)' :
    'prefix': 'rai_pipeK_doc'
    'body': """
    //PipeK :: Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (m a -> m z)
    import PipeK from 'ramda/pipeK';

    """
  'ToString :: * -> String' :
    'prefix': 'rai_toString_doc'
    'body': """
    //ToString :: * -> String
    import ToString from 'ramda/toString';

    """
  'Without :: [a] -> [a] -> [a]' :
    'prefix': 'rai_without_doc'
    'body': """
    //Without :: [a] -> [a] -> [a]
    import Without from 'ramda/without';

    """
  'Both :: (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)' :
    'prefix': 'rai_both_doc'
    'body': """
    //Both :: (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
    import Both from 'ramda/both';

    """
  'Complement :: (*... -> *) -> (*... -> Boolean)' :
    'prefix': 'rai_complement_doc'
    'body': """
    //Complement :: (*... -> *) -> (*... -> Boolean)
    import Complement from 'ramda/complement';

    """
  'Either :: (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)' :
    'prefix': 'rai_either_doc'
    'body': """
    //Either :: (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
    import Either from 'ramda/either';

    """
  'Invoker :: Number -> String -> (a -> b -> ... -> n -> Object -> *)' :
    'prefix': 'rai_invoker_doc'
    'body': """
    //Invoker :: Number -> String -> (a -> b -> ... -> n -> Object -> *)
    import Invoker from 'ramda/invoker';

    """
  'Join :: String -> [a] -> String' :
    'prefix': 'rai_join_doc'
    'body': """
    //Join :: String -> [a] -> String
    import Join from 'ramda/join';

    """
  'Memoize :: (*... -> a) -> (*... -> a)' :
    'prefix': 'rai_memoize_doc'
    'body': """
    //Memoize :: (*... -> a) -> (*... -> a)
    import Memoize from 'ramda/memoize';

    """
  'Split :: (String | RegExp) -> String -> [String]' :
    'prefix': 'rai_split_doc'
    'body': """
    //Split :: (String | RegExp) -> String -> [String]
    import Split from 'ramda/split';

    """
  'Test :: RegExp -> String -> Boolean' :
    'prefix': 'rai_test_doc'
    'body': """
    //Test :: RegExp -> String -> Boolean
    import Test from 'ramda/test';

    """
  'ToLower :: String -> String' :
    'prefix': 'rai_toLower_doc'
    'body': """
    //ToLower :: String -> String
    import ToLower from 'ramda/toLower';

    """
  'ToUpper :: String -> String' :
    'prefix': 'rai_toUpper_doc'
    'body': """
    //ToUpper :: String -> String
    import ToUpper from 'ramda/toUpper';

    """
  'UniqBy :: (a -> b) -> [a] -> [a]' :
    'prefix': 'rai_uniqBy_doc'
    'body': """
    //UniqBy :: (a -> b) -> [a] -> [a]
    import UniqBy from 'ramda/uniqBy';

    """
  'Concat :: [a] -> [a] -> [a]' :
    'prefix': 'rai_concat_doc'
    'body': """
    //Concat :: [a] -> [a] -> [a]
    import Concat from 'ramda/concat';

    """
  'SymmetricDifference :: [*] -> [*] -> [*]' :
    'prefix': 'rai_symmetricDifference_doc'
    'body': """
    //SymmetricDifference :: [*] -> [*] -> [*]
    import SymmetricDifference from 'ramda/symmetricDifference';

    """
  'SymmetricDifferenceWith :: (a -> a -> Boolean) -> [a] -> [a] -> [a]' :
    'prefix': 'rai_symmetricDifferenceWith_doc'
    'body': """
    //SymmetricDifferenceWith :: (a -> a -> Boolean) -> [a] -> [a] -> [a]
    import SymmetricDifferenceWith from 'ramda/symmetricDifferenceWith';

    """
  'Uniq :: [a] -> [a]' :
    'prefix': 'rai_uniq_doc'
    'body': """
    //Uniq :: [a] -> [a]
    import Uniq from 'ramda/uniq';

    """
  'Intersection :: [*] -> [*] -> [*]' :
    'prefix': 'rai_intersection_doc'
    'body': """
    //Intersection :: [*] -> [*] -> [*]
    import Intersection from 'ramda/intersection';

    """
  'Union :: [*] -> [*] -> [*]' :
    'prefix': 'rai_union_doc'
    'body': """
    //Union :: [*] -> [*] -> [*]
    import Union from 'ramda/union';

    """
