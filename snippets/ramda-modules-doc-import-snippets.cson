'.source.js.jsx':
  'ES6 import Ramda/__' :
    'prefix': 'rai____doc'
    'body': """
    import __ from 'ramda/__';

    """
  'ES6 import Ramda/add
    Add :: Number -> Number -> Number' :
    'prefix': 'rai_add_doc'
    'body': """
    //Add :: Number -> Number -> Number
    import Add from 'ramda/add';

    """
  'ES6 import Ramda/adjust
    Adjust :: (a -> a) -> Number -> [a] -> [a]' :
    'prefix': 'rai_adjust_doc'
    'body': """
    //Adjust :: (a -> a) -> Number -> [a] -> [a]
    import Adjust from 'ramda/adjust';

    """
  'ES6 import Ramda/all
    All :: (a -> Boolean) -> [a] -> Boolean' :
    'prefix': 'rai_all_doc'
    'body': """
    //All :: (a -> Boolean) -> [a] -> Boolean
    import All from 'ramda/all';

    """
  'ES6 import Ramda/always
    Always :: a -> (* -> a)' :
    'prefix': 'rai_always_doc'
    'body': """
    //Always :: a -> (* -> a)
    import Always from 'ramda/always';

    """
  'ES6 import Ramda/and
    And :: * -> * -> *' :
    'prefix': 'rai_and_doc'
    'body': """
    //And :: * -> * -> *
    import And from 'ramda/and';

    """
  'ES6 import Ramda/any
    Any :: (a -> Boolean) -> [a] -> Boolean' :
    'prefix': 'rai_any_doc'
    'body': """
    //Any :: (a -> Boolean) -> [a] -> Boolean
    import Any from 'ramda/any';

    """
  'ES6 import Ramda/aperture
    Aperture :: Number -> [a] -> [[a]]' :
    'prefix': 'rai_aperture_doc'
    'body': """
    //Aperture :: Number -> [a] -> [[a]]
    import Aperture from 'ramda/aperture';

    """
  'ES6 import Ramda/append
    Append :: a -> [a] -> [a]' :
    'prefix': 'rai_append_doc'
    'body': """
    //Append :: a -> [a] -> [a]
    import Append from 'ramda/append';

    """
  'ES6 import Ramda/apply
    Apply :: (*... -> a) -> [*] -> a' :
    'prefix': 'rai_apply_doc'
    'body': """
    //Apply :: (*... -> a) -> [*] -> a
    import Apply from 'ramda/apply';

    """
  'ES6 import Ramda/assoc
    Assoc :: String -> a -> {k: v} -> {k: v}' :
    'prefix': 'rai_assoc_doc'
    'body': """
    //Assoc :: String -> a -> {k: v} -> {k: v}
    import Assoc from 'ramda/assoc';

    """
  'ES6 import Ramda/assocPath
    AssocPath :: [String] -> a -> {k: v} -> {k: v}' :
    'prefix': 'rai_assocPath_doc'
    'body': """
    //AssocPath :: [String] -> a -> {k: v} -> {k: v}
    import AssocPath from 'ramda/assocPath';

    """
  'ES6 import Ramda/bind
    Bind :: (* -> *) -> {*} -> (* -> *)' :
    'prefix': 'rai_bind_doc'
    'body': """
    //Bind :: (* -> *) -> {*} -> (* -> *)
    import Bind from 'ramda/bind';

    """
  'ES6 import Ramda/clamp
    Clamp :: Ord a => a -> a -> a -> a' :
    'prefix': 'rai_clamp_doc'
    'body': """
    //Clamp :: Ord a => a -> a -> a -> a
    import Clamp from 'ramda/clamp';

    """
  'ES6 import Ramda/comparator
    Comparator :: (a  b -> Boolean) -> (a  b -> Number)' :
    'prefix': 'rai_comparator_doc'
    'body': """
    //Comparator :: (a  b -> Boolean) -> (a  b -> Number)
    import Comparator from 'ramda/comparator';

    """
  'ES6 import Ramda/curryN
    CurryN :: Number -> (* -> a) -> (* -> a)' :
    'prefix': 'rai_curryN_doc'
    'body': """
    //CurryN :: Number -> (* -> a) -> (* -> a)
    import CurryN from 'ramda/curryN';

    """
  'ES6 import Ramda/dec
    Dec :: Number -> Number' :
    'prefix': 'rai_dec_doc'
    'body': """
    //Dec :: Number -> Number
    import Dec from 'ramda/dec';

    """
  'ES6 import Ramda/defaultTo
    DefaultTo :: a -> b -> a | b' :
    'prefix': 'rai_defaultTo_doc'
    'body': """
    //DefaultTo :: a -> b -> a | b
    import DefaultTo from 'ramda/defaultTo';

    """
  'ES6 import Ramda/differenceWith
    DifferenceWith :: (a -> a -> Boolean) -> [*] -> [*] -> [*]' :
    'prefix': 'rai_differenceWith_doc'
    'body': """
    //DifferenceWith :: (a -> a -> Boolean) -> [*] -> [*] -> [*]
    import DifferenceWith from 'ramda/differenceWith';

    """
  'ES6 import Ramda/dissoc
    Dissoc :: String -> {k: v} -> {k: v}' :
    'prefix': 'rai_dissoc_doc'
    'body': """
    //Dissoc :: String -> {k: v} -> {k: v}
    import Dissoc from 'ramda/dissoc';

    """
  'ES6 import Ramda/dissocPath
    DissocPath :: [String] -> {k: v} -> {k: v}' :
    'prefix': 'rai_dissocPath_doc'
    'body': """
    //DissocPath :: [String] -> {k: v} -> {k: v}
    import DissocPath from 'ramda/dissocPath';

    """
  'ES6 import Ramda/divide
    Divide :: Number -> Number -> Number' :
    'prefix': 'rai_divide_doc'
    'body': """
    //Divide :: Number -> Number -> Number
    import Divide from 'ramda/divide';

    """
  'ES6 import Ramda/dropWhile
    DropWhile :: (a -> Boolean) -> [a] -> [a]' :
    'prefix': 'rai_dropWhile_doc'
    'body': """
    //DropWhile :: (a -> Boolean) -> [a] -> [a]
    import DropWhile from 'ramda/dropWhile';

    """
  'ES6 import Ramda/empty
    Empty :: a -> a' :
    'prefix': 'rai_empty_doc'
    'body': """
    //Empty :: a -> a
    import Empty from 'ramda/empty';

    """
  'ES6 import Ramda/evolve
    Evolve :: {k: (v -> v)} -> {k: v} -> {k: v}' :
    'prefix': 'rai_evolve_doc'
    'body': """
    //Evolve :: {k: (v -> v)} -> {k: v} -> {k: v}
    import Evolve from 'ramda/evolve';

    """
  'ES6 import Ramda/find
    Find :: (a -> Boolean) -> [a] -> a | undefined' :
    'prefix': 'rai_find_doc'
    'body': """
    //Find :: (a -> Boolean) -> [a] -> a | undefined
    import Find from 'ramda/find';

    """
  'ES6 import Ramda/findIndex
    FindIndex :: (a -> Boolean) -> [a] -> Number' :
    'prefix': 'rai_findIndex_doc'
    'body': """
    //FindIndex :: (a -> Boolean) -> [a] -> Number
    import FindIndex from 'ramda/findIndex';

    """
  'ES6 import Ramda/findLast
    FindLast :: (a -> Boolean) -> [a] -> a | undefined' :
    'prefix': 'rai_findLast_doc'
    'body': """
    //FindLast :: (a -> Boolean) -> [a] -> a | undefined
    import FindLast from 'ramda/findLast';

    """
  'ES6 import Ramda/findLastIndex
    FindLastIndex :: (a -> Boolean) -> [a] -> Number' :
    'prefix': 'rai_findLastIndex_doc'
    'body': """
    //FindLastIndex :: (a -> Boolean) -> [a] -> Number
    import FindLastIndex from 'ramda/findLastIndex';

    """
  'ES6 import Ramda/forEach
    ForEach :: (a -> *) -> [a] -> [a]' :
    'prefix': 'rai_forEach_doc'
    'body': """
    //ForEach :: (a -> *) -> [a] -> [a]
    import ForEach from 'ramda/forEach';

    """
  'ES6 import Ramda/fromPairs
    FromPairs :: [[k v]] -> {k: v}' :
    'prefix': 'rai_fromPairs_doc'
    'body': """
    //FromPairs :: [[k v]] -> {k: v}
    import FromPairs from 'ramda/fromPairs';

    """
  'ES6 import Ramda/groupWith
    GroupWith :: (a  a -> Boolean) -> [a] -> [[a]]' :
    'prefix': 'rai_groupWith_doc'
    'body': """
    //GroupWith :: (a  a -> Boolean) -> [a] -> [[a]]
    import GroupWith from 'ramda/groupWith';

    """
  'ES6 import Ramda/gt
    Gt :: Ord a => a -> a -> Boolean' :
    'prefix': 'rai_gt_doc'
    'body': """
    //Gt :: Ord a => a -> a -> Boolean
    import Gt from 'ramda/gt';

    """
  'ES6 import Ramda/gte
    Gte :: Ord a => a -> a -> Boolean' :
    'prefix': 'rai_gte_doc'
    'body': """
    //Gte :: Ord a => a -> a -> Boolean
    import Gte from 'ramda/gte';

    """
  'ES6 import Ramda/has
    Has :: s -> {s: x} -> Boolean' :
    'prefix': 'rai_has_doc'
    'body': """
    //Has :: s -> {s: x} -> Boolean
    import Has from 'ramda/has';

    """
  'ES6 import Ramda/hasIn
    HasIn :: s -> {s: x} -> Boolean' :
    'prefix': 'rai_hasIn_doc'
    'body': """
    //HasIn :: s -> {s: x} -> Boolean
    import HasIn from 'ramda/hasIn';

    """
  'ES6 import Ramda/identical
    Identical :: a -> a -> Boolean' :
    'prefix': 'rai_identical_doc'
    'body': """
    //Identical :: a -> a -> Boolean
    import Identical from 'ramda/identical';

    """
  'ES6 import Ramda/identity
    Identity :: a -> a' :
    'prefix': 'rai_identity_doc'
    'body': """
    //Identity :: a -> a
    import Identity from 'ramda/identity';

    """
  'ES6 import Ramda/ifElse
    IfElse :: (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)' :
    'prefix': 'rai_ifElse_doc'
    'body': """
    //IfElse :: (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)
    import IfElse from 'ramda/ifElse';

    """
  'ES6 import Ramda/inc
    Inc :: Number -> Number' :
    'prefix': 'rai_inc_doc'
    'body': """
    //Inc :: Number -> Number
    import Inc from 'ramda/inc';

    """
  'ES6 import Ramda/insert
    Insert :: Number -> a -> [a] -> [a]' :
    'prefix': 'rai_insert_doc'
    'body': """
    //Insert :: Number -> a -> [a] -> [a]
    import Insert from 'ramda/insert';

    """
  'ES6 import Ramda/insertAll
    InsertAll :: Number -> [a] -> [a] -> [a]' :
    'prefix': 'rai_insertAll_doc'
    'body': """
    //InsertAll :: Number -> [a] -> [a] -> [a]
    import InsertAll from 'ramda/insertAll';

    """
  'ES6 import Ramda/intersperse
    Intersperse :: a -> [a] -> [a]' :
    'prefix': 'rai_intersperse_doc'
    'body': """
    //Intersperse :: a -> [a] -> [a]
    import Intersperse from 'ramda/intersperse';

    """
  'ES6 import Ramda/is
    Is :: (* -> {*}) -> a -> Boolean' :
    'prefix': 'rai_is_doc'
    'body': """
    //Is :: (* -> {*}) -> a -> Boolean
    import Is from 'ramda/is';

    """
  'ES6 import Ramda/isArrayLike
    IsArrayLike :: * -> Boolean' :
    'prefix': 'rai_isArrayLike_doc'
    'body': """
    //IsArrayLike :: * -> Boolean
    import IsArrayLike from 'ramda/isArrayLike';

    """
  'ES6 import Ramda/isNil
    IsNil :: * -> Boolean' :
    'prefix': 'rai_isNil_doc'
    'body': """
    //IsNil :: * -> Boolean
    import IsNil from 'ramda/isNil';

    """
  'ES6 import Ramda/keys
    Keys :: {k: v} -> [k]' :
    'prefix': 'rai_keys_doc'
    'body': """
    //Keys :: {k: v} -> [k]
    import Keys from 'ramda/keys';

    """
  'ES6 import Ramda/keysIn
    KeysIn :: {k: v} -> [k]' :
    'prefix': 'rai_keysIn_doc'
    'body': """
    //KeysIn :: {k: v} -> [k]
    import KeysIn from 'ramda/keysIn';

    """
  'ES6 import Ramda/length
    Length :: [a] -> Number' :
    'prefix': 'rai_length_doc'
    'body': """
    //Length :: [a] -> Number
    import Length from 'ramda/length';

    """
  'ES6 import Ramda/lt
    Lt :: Ord a => a -> a -> Boolean' :
    'prefix': 'rai_lt_doc'
    'body': """
    //Lt :: Ord a => a -> a -> Boolean
    import Lt from 'ramda/lt';

    """
  'ES6 import Ramda/lte
    Lte :: Ord a => a -> a -> Boolean' :
    'prefix': 'rai_lte_doc'
    'body': """
    //Lte :: Ord a => a -> a -> Boolean
    import Lte from 'ramda/lte';

    """
  'ES6 import Ramda/mapAccum
    MapAccum :: (acc -> x -> (acc  y)) -> acc -> [x] -> (acc  [y])' :
    'prefix': 'rai_mapAccum_doc'
    'body': """
    //MapAccum :: (acc -> x -> (acc  y)) -> acc -> [x] -> (acc  [y])
    import MapAccum from 'ramda/mapAccum';

    """
  'ES6 import Ramda/mapAccumRight
    MapAccumRight :: (acc -> x -> (acc  y)) -> acc -> [x] -> (acc  [y])' :
    'prefix': 'rai_mapAccumRight_doc'
    'body': """
    //MapAccumRight :: (acc -> x -> (acc  y)) -> acc -> [x] -> (acc  [y])
    import MapAccumRight from 'ramda/mapAccumRight';

    """
  'ES6 import Ramda/match
    Match :: RegExp -> String -> [String | Undefined]' :
    'prefix': 'rai_match_doc'
    'body': """
    //Match :: RegExp -> String -> [String | Undefined]
    import Match from 'ramda/match';

    """
  'ES6 import Ramda/mathMod
    MathMod :: Number -> Number -> Number' :
    'prefix': 'rai_mathMod_doc'
    'body': """
    //MathMod :: Number -> Number -> Number
    import MathMod from 'ramda/mathMod';

    """
  'ES6 import Ramda/max
    Max :: Ord a => a -> a -> a' :
    'prefix': 'rai_max_doc'
    'body': """
    //Max :: Ord a => a -> a -> a
    import Max from 'ramda/max';

    """
  'ES6 import Ramda/maxBy
    MaxBy :: Ord b => (a -> b) -> a -> a -> a' :
    'prefix': 'rai_maxBy_doc'
    'body': """
    //MaxBy :: Ord b => (a -> b) -> a -> a -> a
    import MaxBy from 'ramda/maxBy';

    """
  'ES6 import Ramda/merge
    Merge :: {k: v} -> {k: v} -> {k: v}' :
    'prefix': 'rai_merge_doc'
    'body': """
    //Merge :: {k: v} -> {k: v} -> {k: v}
    import Merge from 'ramda/merge';

    """
  'ES6 import Ramda/mergeAll
    MergeAll :: [{k: v}] -> {k: v}' :
    'prefix': 'rai_mergeAll_doc'
    'body': """
    //MergeAll :: [{k: v}] -> {k: v}
    import MergeAll from 'ramda/mergeAll';

    """
  'ES6 import Ramda/mergeWithKey
    MergeWithKey :: (String -> a -> a -> a) -> {a} -> {a} -> {a}' :
    'prefix': 'rai_mergeWithKey_doc'
    'body': """
    //MergeWithKey :: (String -> a -> a -> a) -> {a} -> {a} -> {a}
    import MergeWithKey from 'ramda/mergeWithKey';

    """
  'ES6 import Ramda/min
    Min :: Ord a => a -> a -> a' :
    'prefix': 'rai_min_doc'
    'body': """
    //Min :: Ord a => a -> a -> a
    import Min from 'ramda/min';

    """
  'ES6 import Ramda/minBy
    MinBy :: Ord b => (a -> b) -> a -> a -> a' :
    'prefix': 'rai_minBy_doc'
    'body': """
    //MinBy :: Ord b => (a -> b) -> a -> a -> a
    import MinBy from 'ramda/minBy';

    """
  'ES6 import Ramda/modulo
    Modulo :: Number -> Number -> Number' :
    'prefix': 'rai_modulo_doc'
    'body': """
    //Modulo :: Number -> Number -> Number
    import Modulo from 'ramda/modulo';

    """
  'ES6 import Ramda/multiply
    Multiply :: Number -> Number -> Number' :
    'prefix': 'rai_multiply_doc'
    'body': """
    //Multiply :: Number -> Number -> Number
    import Multiply from 'ramda/multiply';

    """
  'ES6 import Ramda/nAry
    NAry :: Number -> (* -> a) -> (* -> a)' :
    'prefix': 'rai_nAry_doc'
    'body': """
    //NAry :: Number -> (* -> a) -> (* -> a)
    import NAry from 'ramda/nAry';

    """
  'ES6 import Ramda/negate
    Negate :: Number -> Number' :
    'prefix': 'rai_negate_doc'
    'body': """
    //Negate :: Number -> Number
    import Negate from 'ramda/negate';

    """
  'ES6 import Ramda/none
    None :: (a -> Boolean) -> [a] -> Boolean' :
    'prefix': 'rai_none_doc'
    'body': """
    //None :: (a -> Boolean) -> [a] -> Boolean
    import None from 'ramda/none';

    """
  'ES6 import Ramda/not
    Not :: * -> Boolean' :
    'prefix': 'rai_not_doc'
    'body': """
    //Not :: * -> Boolean
    import Not from 'ramda/not';

    """
  'ES6 import Ramda/nth
    Nth :: Number -> [a] -> a | Undefined' :
    'prefix': 'rai_nth_doc'
    'body': """
    //Nth :: Number -> [a] -> a | Undefined
    import Nth from 'ramda/nth';

    """
  'ES6 import Ramda/nthArg
    NthArg :: Number -> *... -> *' :
    'prefix': 'rai_nthArg_doc'
    'body': """
    //NthArg :: Number -> *... -> *
    import NthArg from 'ramda/nthArg';

    """
  'ES6 import Ramda/objOf
    ObjOf :: String -> a -> {String:a}' :
    'prefix': 'rai_objOf_doc'
    'body': """
    //ObjOf :: String -> a -> {String:a}
    import ObjOf from 'ramda/objOf';

    """
  'ES6 import Ramda/of
    Of :: a -> [a]' :
    'prefix': 'rai_of_doc'
    'body': """
    //Of :: a -> [a]
    import Of from 'ramda/of';

    """
  'ES6 import Ramda/once
    Once :: (a... -> b) -> (a... -> b)' :
    'prefix': 'rai_once_doc'
    'body': """
    //Once :: (a... -> b) -> (a... -> b)
    import Once from 'ramda/once';

    """
  'ES6 import Ramda/or
    Or :: * -> * -> *' :
    'prefix': 'rai_or_doc'
    'body': """
    //Or :: * -> * -> *
    import Or from 'ramda/or';

    """
  'ES6 import Ramda/over
    Over :: Lens s a -> (a -> a) -> s -> s' :
    'prefix': 'rai_over_doc'
    'body': """
    //Over :: Lens s a -> (a -> a) -> s -> s
    import Over from 'ramda/over';

    """
  'ES6 import Ramda/pair
    Pair :: a -> b -> (a b)' :
    'prefix': 'rai_pair_doc'
    'body': """
    //Pair :: a -> b -> (a b)
    import Pair from 'ramda/pair';

    """
  'ES6 import Ramda/path
    Path :: [String] -> {k: v} -> v | Undefined' :
    'prefix': 'rai_path_doc'
    'body': """
    //Path :: [String] -> {k: v} -> v | Undefined
    import Path from 'ramda/path';

    """
  'ES6 import Ramda/pathOr
    PathOr :: a -> [String] -> Object -> a' :
    'prefix': 'rai_pathOr_doc'
    'body': """
    //PathOr :: a -> [String] -> Object -> a
    import PathOr from 'ramda/pathOr';

    """
  'ES6 import Ramda/pathSatisfies
    PathSatisfies :: (a -> Boolean) -> [String] -> Object -> Boolean' :
    'prefix': 'rai_pathSatisfies_doc'
    'body': """
    //PathSatisfies :: (a -> Boolean) -> [String] -> Object -> Boolean
    import PathSatisfies from 'ramda/pathSatisfies';

    """
  'ES6 import Ramda/pick
    Pick :: [k] -> {k: v} -> {k: v}' :
    'prefix': 'rai_pick_doc'
    'body': """
    //Pick :: [k] -> {k: v} -> {k: v}
    import Pick from 'ramda/pick';

    """
  'ES6 import Ramda/pickAll
    PickAll :: [k] -> {k: v} -> {k: v}' :
    'prefix': 'rai_pickAll_doc'
    'body': """
    //PickAll :: [k] -> {k: v} -> {k: v}
    import PickAll from 'ramda/pickAll';

    """
  'ES6 import Ramda/pickBy
    PickBy :: (v  k -> Boolean) -> {k: v} -> {k: v}' :
    'prefix': 'rai_pickBy_doc'
    'body': """
    //PickBy :: (v  k -> Boolean) -> {k: v} -> {k: v}
    import PickBy from 'ramda/pickBy';

    """
  'ES6 import Ramda/prepend
    Prepend :: a -> [a] -> [a]' :
    'prefix': 'rai_prepend_doc'
    'body': """
    //Prepend :: a -> [a] -> [a]
    import Prepend from 'ramda/prepend';

    """
  'ES6 import Ramda/prop
    Prop :: s -> {s: a} -> a | Undefined' :
    'prefix': 'rai_prop_doc'
    'body': """
    //Prop :: s -> {s: a} -> a | Undefined
    import Prop from 'ramda/prop';

    """
  'ES6 import Ramda/propOr
    PropOr :: a -> String -> Object -> a' :
    'prefix': 'rai_propOr_doc'
    'body': """
    //PropOr :: a -> String -> Object -> a
    import PropOr from 'ramda/propOr';

    """
  'ES6 import Ramda/propSatisfies
    PropSatisfies :: (a -> Boolean) -> String -> {String: a} -> Boolean' :
    'prefix': 'rai_propSatisfies_doc'
    'body': """
    //PropSatisfies :: (a -> Boolean) -> String -> {String: a} -> Boolean
    import PropSatisfies from 'ramda/propSatisfies';

    """
  'ES6 import Ramda/props
    Props :: [k] -> {k: v} -> [v]' :
    'prefix': 'rai_props_doc'
    'body': """
    //Props :: [k] -> {k: v} -> [v]
    import Props from 'ramda/props';

    """
  'ES6 import Ramda/range
    Range :: Number -> Number -> [Number]' :
    'prefix': 'rai_range_doc'
    'body': """
    //Range :: Number -> Number -> [Number]
    import Range from 'ramda/range';

    """
  'ES6 import Ramda/reduceRight
    ReduceRight :: (a b -> a) -> a -> [b] -> a' :
    'prefix': 'rai_reduceRight_doc'
    'body': """
    //ReduceRight :: (a b -> a) -> a -> [b] -> a
    import ReduceRight from 'ramda/reduceRight';

    """
  'ES6 import Ramda/reduced
    Reduced :: a -> *' :
    'prefix': 'rai_reduced_doc'
    'body': """
    //Reduced :: a -> *
    import Reduced from 'ramda/reduced';

    """
  'ES6 import Ramda/remove
    Remove :: Number -> Number -> [a] -> [a]' :
    'prefix': 'rai_remove_doc'
    'body': """
    //Remove :: Number -> Number -> [a] -> [a]
    import Remove from 'ramda/remove';

    """
  'ES6 import Ramda/replace
    Replace :: RegExp|String -> String -> String -> String' :
    'prefix': 'rai_replace_doc'
    'body': """
    //Replace :: RegExp|String -> String -> String -> String
    import Replace from 'ramda/replace';

    """
  'ES6 import Ramda/reverse
    Reverse :: [a] -> [a]' :
    'prefix': 'rai_reverse_doc'
    'body': """
    //Reverse :: [a] -> [a]
    import Reverse from 'ramda/reverse';

    """
  'ES6 import Ramda/scan
    Scan :: (a b -> a) -> a -> [b] -> [a]' :
    'prefix': 'rai_scan_doc'
    'body': """
    //Scan :: (a b -> a) -> a -> [b] -> [a]
    import Scan from 'ramda/scan';

    """
  'ES6 import Ramda/set
    Set :: Lens s a -> a -> s -> s' :
    'prefix': 'rai_set_doc'
    'body': """
    //Set :: Lens s a -> a -> s -> s
    import Set from 'ramda/set';

    """
  'ES6 import Ramda/slice
    Slice :: Number -> Number -> [a] -> [a]' :
    'prefix': 'rai_slice_doc'
    'body': """
    //Slice :: Number -> Number -> [a] -> [a]
    import Slice from 'ramda/slice';

    """
  'ES6 import Ramda/sort
    Sort :: (a a -> Number) -> [a] -> [a]' :
    'prefix': 'rai_sort_doc'
    'body': """
    //Sort :: (a a -> Number) -> [a] -> [a]
    import Sort from 'ramda/sort';

    """
  'ES6 import Ramda/sortBy
    SortBy :: Ord b => (a -> b) -> [a] -> [a]' :
    'prefix': 'rai_sortBy_doc'
    'body': """
    //SortBy :: Ord b => (a -> b) -> [a] -> [a]
    import SortBy from 'ramda/sortBy';

    """
  'ES6 import Ramda/splitAt
    SplitAt :: Number -> [a] -> [[a]  [a]]' :
    'prefix': 'rai_splitAt_doc'
    'body': """
    //SplitAt :: Number -> [a] -> [[a]  [a]]
    import SplitAt from 'ramda/splitAt';

    """
  'ES6 import Ramda/splitEvery
    SplitEvery :: Number -> [a] -> [[a]]' :
    'prefix': 'rai_splitEvery_doc'
    'body': """
    //SplitEvery :: Number -> [a] -> [[a]]
    import SplitEvery from 'ramda/splitEvery';

    """
  'ES6 import Ramda/splitWhen
    SplitWhen :: (a -> Boolean) -> [a] -> [[a]  [a]]' :
    'prefix': 'rai_splitWhen_doc'
    'body': """
    //SplitWhen :: (a -> Boolean) -> [a] -> [[a]  [a]]
    import SplitWhen from 'ramda/splitWhen';

    """
  'ES6 import Ramda/subtract
    Subtract :: Number -> Number -> Number' :
    'prefix': 'rai_subtract_doc'
    'body': """
    //Subtract :: Number -> Number -> Number
    import Subtract from 'ramda/subtract';

    """
  'ES6 import Ramda/tail
    Tail :: [a] -> [a]' :
    'prefix': 'rai_tail_doc'
    'body': """
    //Tail :: [a] -> [a]
    import Tail from 'ramda/tail';

    """
  'ES6 import Ramda/take
    Take :: Number -> [a] -> [a]' :
    'prefix': 'rai_take_doc'
    'body': """
    //Take :: Number -> [a] -> [a]
    import Take from 'ramda/take';

    """
  'ES6 import Ramda/takeLastWhile
    TakeLastWhile :: (a -> Boolean) -> [a] -> [a]' :
    'prefix': 'rai_takeLastWhile_doc'
    'body': """
    //TakeLastWhile :: (a -> Boolean) -> [a] -> [a]
    import TakeLastWhile from 'ramda/takeLastWhile';

    """
  'ES6 import Ramda/takeWhile
    TakeWhile :: (a -> Boolean) -> [a] -> [a]' :
    'prefix': 'rai_takeWhile_doc'
    'body': """
    //TakeWhile :: (a -> Boolean) -> [a] -> [a]
    import TakeWhile from 'ramda/takeWhile';

    """
  'ES6 import Ramda/tap
    Tap :: (a -> *) -> a -> a' :
    'prefix': 'rai_tap_doc'
    'body': """
    //Tap :: (a -> *) -> a -> a
    import Tap from 'ramda/tap';

    """
  'ES6 import Ramda/times
    Times :: (Number -> a) -> Number -> [a]' :
    'prefix': 'rai_times_doc'
    'body': """
    //Times :: (Number -> a) -> Number -> [a]
    import Times from 'ramda/times';

    """
  'ES6 import Ramda/toPairs
    ToPairs :: {String: *} -> [[String *]]' :
    'prefix': 'rai_toPairs_doc'
    'body': """
    //ToPairs :: {String: *} -> [[String *]]
    import ToPairs from 'ramda/toPairs';

    """
  'ES6 import Ramda/toPairsIn
    ToPairsIn :: {String: *} -> [[String *]]' :
    'prefix': 'rai_toPairsIn_doc'
    'body': """
    //ToPairsIn :: {String: *} -> [[String *]]
    import ToPairsIn from 'ramda/toPairsIn';

    """
  'ES6 import Ramda/transpose
    Transpose :: [[a]] -> [[a]]' :
    'prefix': 'rai_transpose_doc'
    'body': """
    //Transpose :: [[a]] -> [[a]]
    import Transpose from 'ramda/transpose';

    """
  'ES6 import Ramda/trim
    Trim :: String -> String' :
    'prefix': 'rai_trim_doc'
    'body': """
    //Trim :: String -> String
    import Trim from 'ramda/trim';

    """
  'ES6 import Ramda/tryCatch
    TryCatch :: (...x -> a) -> ((e  ...x) -> a) -> (...x -> a)' :
    'prefix': 'rai_tryCatch_doc'
    'body': """
    //TryCatch :: (...x -> a) -> ((e  ...x) -> a) -> (...x -> a)
    import TryCatch from 'ramda/tryCatch';

    """
  'ES6 import Ramda/type
    Type :: (* -> {*}) -> String' :
    'prefix': 'rai_type_doc'
    'body': """
    //Type :: (* -> {*}) -> String
    import Type from 'ramda/type';

    """
  'ES6 import Ramda/unapply
    Unapply :: ([*...] -> a) -> (*... -> a)' :
    'prefix': 'rai_unapply_doc'
    'body': """
    //Unapply :: ([*...] -> a) -> (*... -> a)
    import Unapply from 'ramda/unapply';

    """
  'ES6 import Ramda/unary
    Unary :: (* -> b) -> (a -> b)' :
    'prefix': 'rai_unary_doc'
    'body': """
    //Unary :: (* -> b) -> (a -> b)
    import Unary from 'ramda/unary';

    """
  'ES6 import Ramda/uncurryN
    UncurryN :: Number -> (a -> b) -> (a -> c)' :
    'prefix': 'rai_uncurryN_doc'
    'body': """
    //UncurryN :: Number -> (a -> b) -> (a -> c)
    import UncurryN from 'ramda/uncurryN';

    """
  'ES6 import Ramda/unfold
    Unfold :: (a -> [b]) -> * -> [b]' :
    'prefix': 'rai_unfold_doc'
    'body': """
    //Unfold :: (a -> [b]) -> * -> [b]
    import Unfold from 'ramda/unfold';

    """
  'ES6 import Ramda/uniqWith
    UniqWith :: (a  a -> Boolean) -> [a] -> [a]' :
    'prefix': 'rai_uniqWith_doc'
    'body': """
    //UniqWith :: (a  a -> Boolean) -> [a] -> [a]
    import UniqWith from 'ramda/uniqWith';

    """
  'ES6 import Ramda/unless
    Unless :: (a -> Boolean) -> (a -> a) -> a -> a' :
    'prefix': 'rai_unless_doc'
    'body': """
    //Unless :: (a -> Boolean) -> (a -> a) -> a -> a
    import Unless from 'ramda/unless';

    """
  'ES6 import Ramda/until
    Until :: (a -> Boolean) -> (a -> a) -> a -> a' :
    'prefix': 'rai_until_doc'
    'body': """
    //Until :: (a -> Boolean) -> (a -> a) -> a -> a
    import Until from 'ramda/until';

    """
  'ES6 import Ramda/update
    Update :: Number -> a -> [a] -> [a]' :
    'prefix': 'rai_update_doc'
    'body': """
    //Update :: Number -> a -> [a] -> [a]
    import Update from 'ramda/update';

    """
  'ES6 import Ramda/useWith
    UseWith :: (x1 -> x2 -> ... -> z) -> [(a -> x1)  (b -> x2)  ...] -> (a -> b -> ... -> z)' :
    'prefix': 'rai_useWith_doc'
    'body': """
    //UseWith :: (x1 -> x2 -> ... -> z) -> [(a -> x1)  (b -> x2)  ...] -> (a -> b -> ... -> z)
    import UseWith from 'ramda/useWith';

    """
  'ES6 import Ramda/values
    Values :: {k: v} -> [v]' :
    'prefix': 'rai_values_doc'
    'body': """
    //Values :: {k: v} -> [v]
    import Values from 'ramda/values';

    """
  'ES6 import Ramda/valuesIn
    ValuesIn :: {k: v} -> [v]' :
    'prefix': 'rai_valuesIn_doc'
    'body': """
    //ValuesIn :: {k: v} -> [v]
    import ValuesIn from 'ramda/valuesIn';

    """
  'ES6 import Ramda/view
    View :: Lens s a -> s -> a' :
    'prefix': 'rai_view_doc'
    'body': """
    //View :: Lens s a -> s -> a
    import View from 'ramda/view';

    """
  'ES6 import Ramda/when
    When :: (a -> Boolean) -> (a -> a) -> a -> a' :
    'prefix': 'rai_when_doc'
    'body': """
    //When :: (a -> Boolean) -> (a -> a) -> a -> a
    import When from 'ramda/when';

    """
  'ES6 import Ramda/where
    Where :: {String: (* -> Boolean)} -> {String: *} -> Boolean' :
    'prefix': 'rai_where_doc'
    'body': """
    //Where :: {String: (* -> Boolean)} -> {String: *} -> Boolean
    import Where from 'ramda/where';

    """
  'ES6 import Ramda/wrap
    Wrap :: (a... -> b) -> ((a... -> b) -> a... -> c) -> (a... -> c)' :
    'prefix': 'rai_wrap_doc'
    'body': """
    //Wrap :: (a... -> b) -> ((a... -> b) -> a... -> c) -> (a... -> c)
    import Wrap from 'ramda/wrap';

    """
  'ES6 import Ramda/xprod
    Xprod :: [a] -> [b] -> [[a b]]' :
    'prefix': 'rai_xprod_doc'
    'body': """
    //Xprod :: [a] -> [b] -> [[a b]]
    import Xprod from 'ramda/xprod';

    """
  'ES6 import Ramda/zip
    Zip :: [a] -> [b] -> [[a b]]' :
    'prefix': 'rai_zip_doc'
    'body': """
    //Zip :: [a] -> [b] -> [[a b]]
    import Zip from 'ramda/zip';

    """
  'ES6 import Ramda/zipObj
    ZipObj :: [String] -> [*] -> {String: *}' :
    'prefix': 'rai_zipObj_doc'
    'body': """
    //ZipObj :: [String] -> [*] -> {String: *}
    import ZipObj from 'ramda/zipObj';

    """
  'ES6 import Ramda/zipWith
    ZipWith :: (a b -> c) -> [a] -> [b] -> [c]' :
    'prefix': 'rai_zipWith_doc'
    'body': """
    //ZipWith :: (a b -> c) -> [a] -> [b] -> [c]
    import ZipWith from 'ramda/zipWith';

    """
  'ES6 import Ramda/F
    F :: * -> Boolean' :
    'prefix': 'rai_F_doc'
    'body': """
    //F :: * -> Boolean
    import F from 'ramda/F';

    """
  'ES6 import Ramda/T
    T :: * -> Boolean' :
    'prefix': 'rai_T_doc'
    'body': """
    //T :: * -> Boolean
    import T from 'ramda/T';

    """
  'ES6 import Ramda/addIndex
    AddIndex :: ((a ... -> b) ... -> [a] -> *) -> (a ...  Int  [a] -> b) ... -> [a] -> *)' :
    'prefix': 'rai_addIndex_doc'
    'body': """
    //AddIndex :: ((a ... -> b) ... -> [a] -> *) -> (a ...  Int  [a] -> b) ... -> [a] -> *)
    import AddIndex from 'ramda/addIndex';

    """
  'ES6 import Ramda/binary
    Binary :: (* -> c) -> (a  b -> c)' :
    'prefix': 'rai_binary_doc'
    'body': """
    //Binary :: (* -> c) -> (a  b -> c)
    import Binary from 'ramda/binary';

    """
  'ES6 import Ramda/clone
    Clone :: {*} -> {*}' :
    'prefix': 'rai_clone_doc'
    'body': """
    //Clone :: {*} -> {*}
    import Clone from 'ramda/clone';

    """
  'ES6 import Ramda/curry
    Curry :: (* -> a) -> (* -> a)' :
    'prefix': 'rai_curry_doc'
    'body': """
    //Curry :: (* -> a) -> (* -> a)
    import Curry from 'ramda/curry';

    """
  'ES6 import Ramda/drop
    Drop :: Number -> [a] -> [a]' :
    'prefix': 'rai_drop_doc'
    'body': """
    //Drop :: Number -> [a] -> [a]
    import Drop from 'ramda/drop';

    """
  'ES6 import Ramda/dropLast
    DropLast :: Number -> [a] -> [a]' :
    'prefix': 'rai_dropLast_doc'
    'body': """
    //DropLast :: Number -> [a] -> [a]
    import DropLast from 'ramda/dropLast';

    """
  'ES6 import Ramda/dropLastWhile
    DropLastWhile :: (a -> Boolean) -> [a] -> [a]' :
    'prefix': 'rai_dropLastWhile_doc'
    'body': """
    //DropLastWhile :: (a -> Boolean) -> [a] -> [a]
    import DropLastWhile from 'ramda/dropLastWhile';

    """
  'ES6 import Ramda/equals
    Equals :: a -> b -> Boolean' :
    'prefix': 'rai_equals_doc'
    'body': """
    //Equals :: a -> b -> Boolean
    import Equals from 'ramda/equals';

    """
  'ES6 import Ramda/filter
    Filter :: Filterable f => (a -> Boolean) -> f a -> f a' :
    'prefix': 'rai_filter_doc'
    'body': """
    //Filter :: Filterable f => (a -> Boolean) -> f a -> f a
    import Filter from 'ramda/filter';

    """
  'ES6 import Ramda/flatten
    Flatten :: [a] -> [b]' :
    'prefix': 'rai_flatten_doc'
    'body': """
    //Flatten :: [a] -> [b]
    import Flatten from 'ramda/flatten';

    """
  'ES6 import Ramda/flip
    Flip :: (a -> b -> c -> ... -> z) -> (b -> a -> c -> ... -> z)' :
    'prefix': 'rai_flip_doc'
    'body': """
    //Flip :: (a -> b -> c -> ... -> z) -> (b -> a -> c -> ... -> z)
    import Flip from 'ramda/flip';

    """
  'ES6 import Ramda/head
    Head :: [a] -> a | Undefined' :
    'prefix': 'rai_head_doc'
    'body': """
    //Head :: [a] -> a | Undefined
    import Head from 'ramda/head';

    """
  'ES6 import Ramda/init
    Init :: [a] -> [a]' :
    'prefix': 'rai_init_doc'
    'body': """
    //Init :: [a] -> [a]
    import Init from 'ramda/init';

    """
  'ES6 import Ramda/intersectionWith
    IntersectionWith :: (a -> a -> Boolean) -> [*] -> [*] -> [*]' :
    'prefix': 'rai_intersectionWith_doc'
    'body': """
    //IntersectionWith :: (a -> a -> Boolean) -> [*] -> [*] -> [*]
    import IntersectionWith from 'ramda/intersectionWith';

    """
  'ES6 import Ramda/into
    Into :: a -> (b -> b) -> [c] -> a' :
    'prefix': 'rai_into_doc'
    'body': """
    //Into :: a -> (b -> b) -> [c] -> a
    import Into from 'ramda/into';

    """
  'ES6 import Ramda/invert
    Invert :: {s: x} -> {x: [ s  ... ]}' :
    'prefix': 'rai_invert_doc'
    'body': """
    //Invert :: {s: x} -> {x: [ s  ... ]}
    import Invert from 'ramda/invert';

    """
  'ES6 import Ramda/invertObj
    InvertObj :: {s: x} -> {x: s}' :
    'prefix': 'rai_invertObj_doc'
    'body': """
    //InvertObj :: {s: x} -> {x: s}
    import InvertObj from 'ramda/invertObj';

    """
  'ES6 import Ramda/isEmpty
    IsEmpty :: a -> Boolean' :
    'prefix': 'rai_isEmpty_doc'
    'body': """
    //IsEmpty :: a -> Boolean
    import IsEmpty from 'ramda/isEmpty';

    """
  'ES6 import Ramda/last
    Last :: [a] -> a | Undefined' :
    'prefix': 'rai_last_doc'
    'body': """
    //Last :: [a] -> a | Undefined
    import Last from 'ramda/last';

    """
  'ES6 import Ramda/lastIndexOf
    LastIndexOf :: a -> [a] -> Number' :
    'prefix': 'rai_lastIndexOf_doc'
    'body': """
    //LastIndexOf :: a -> [a] -> Number
    import LastIndexOf from 'ramda/lastIndexOf';

    """
  'ES6 import Ramda/map
    Map :: Functor f => (a -> b) -> f a -> f b' :
    'prefix': 'rai_map_doc'
    'body': """
    //Map :: Functor f => (a -> b) -> f a -> f b
    import Map from 'ramda/map';

    """
  'ES6 import Ramda/mapObjIndexed
    MapObjIndexed :: ((*  String  Object) -> *) -> Object -> Object' :
    'prefix': 'rai_mapObjIndexed_doc'
    'body': """
    //MapObjIndexed :: ((*  String  Object) -> *) -> Object -> Object
    import MapObjIndexed from 'ramda/mapObjIndexed';

    """
  'ES6 import Ramda/mergeWith
    MergeWith :: (a -> a -> a) -> {a} -> {a} -> {a}' :
    'prefix': 'rai_mergeWith_doc'
    'body': """
    //MergeWith :: (a -> a -> a) -> {a} -> {a} -> {a}
    import MergeWith from 'ramda/mergeWith';

    """
  'ES6 import Ramda/partial
    Partial :: ((a  b  c  ...  n) -> x) -> [a  b  c  ...] -> ((d  e  f  ...  n) -> x)' :
    'prefix': 'rai_partial_doc'
    'body': """
    //Partial :: ((a  b  c  ...  n) -> x) -> [a  b  c  ...] -> ((d  e  f  ...  n) -> x)
    import Partial from 'ramda/partial';

    """
  'ES6 import Ramda/partialRight
    PartialRight :: ((a  b  c  ...  n) -> x) -> [d  e  f  ...  n] -> ((a  b  c  ...) -> x)' :
    'prefix': 'rai_partialRight_doc'
    'body': """
    //PartialRight :: ((a  b  c  ...  n) -> x) -> [d  e  f  ...  n] -> ((a  b  c  ...) -> x)
    import PartialRight from 'ramda/partialRight';

    """
  'ES6 import Ramda/pathEq
    PathEq :: [String] -> * -> {String: *} -> Boolean' :
    'prefix': 'rai_pathEq_doc'
    'body': """
    //PathEq :: [String] -> * -> {String: *} -> Boolean
    import PathEq from 'ramda/pathEq';

    """
  'ES6 import Ramda/pluck
    Pluck :: k -> [{k: v}] -> [v]' :
    'prefix': 'rai_pluck_doc'
    'body': """
    //Pluck :: k -> [{k: v}] -> [v]
    import Pluck from 'ramda/pluck';

    """
  'ES6 import Ramda/project
    Project :: [k] -> [{k: v}] -> [{k: v}]' :
    'prefix': 'rai_project_doc'
    'body': """
    //Project :: [k] -> [{k: v}] -> [{k: v}]
    import Project from 'ramda/project';

    """
  'ES6 import Ramda/propEq
    PropEq :: String -> a -> Object -> Boolean' :
    'prefix': 'rai_propEq_doc'
    'body': """
    //PropEq :: String -> a -> Object -> Boolean
    import PropEq from 'ramda/propEq';

    """
  'ES6 import Ramda/propIs
    PropIs :: Type -> String -> Object -> Boolean' :
    'prefix': 'rai_propIs_doc'
    'body': """
    //PropIs :: Type -> String -> Object -> Boolean
    import PropIs from 'ramda/propIs';

    """
  'ES6 import Ramda/reduce
    Reduce :: ((a  b) -> a) -> a -> [b] -> a' :
    'prefix': 'rai_reduce_doc'
    'body': """
    //Reduce :: ((a  b) -> a) -> a -> [b] -> a
    import Reduce from 'ramda/reduce';

    """
  'ES6 import Ramda/reduceBy
    ReduceBy :: ((a  b) -> a) -> a -> (b -> String) -> [b] -> {String: a}' :
    'prefix': 'rai_reduceBy_doc'
    'body': """
    //ReduceBy :: ((a  b) -> a) -> a -> (b -> String) -> [b] -> {String: a}
    import ReduceBy from 'ramda/reduceBy';

    """
  'ES6 import Ramda/reject
    Reject :: Filterable f => (a -> Boolean) -> f a -> f a' :
    'prefix': 'rai_reject_doc'
    'body': """
    //Reject :: Filterable f => (a -> Boolean) -> f a -> f a
    import Reject from 'ramda/reject';

    """
  'ES6 import Ramda/repeat
    Repeat :: a -> n -> [a]' :
    'prefix': 'rai_repeat_doc'
    'body': """
    //Repeat :: a -> n -> [a]
    import Repeat from 'ramda/repeat';

    """
  'ES6 import Ramda/sum
    Sum :: [Number] -> Number' :
    'prefix': 'rai_sum_doc'
    'body': """
    //Sum :: [Number] -> Number
    import Sum from 'ramda/sum';

    """
  'ES6 import Ramda/takeLast
    TakeLast :: Number -> [a] -> [a]' :
    'prefix': 'rai_takeLast_doc'
    'body': """
    //TakeLast :: Number -> [a] -> [a]
    import TakeLast from 'ramda/takeLast';

    """
  'ES6 import Ramda/transduce
    Transduce :: (c -> c) -> (a b -> a) -> a -> [b] -> a' :
    'prefix': 'rai_transduce_doc'
    'body': """
    //Transduce :: (c -> c) -> (a b -> a) -> a -> [b] -> a
    import Transduce from 'ramda/transduce';

    """
  'ES6 import Ramda/unionWith
    UnionWith :: (a -> a -> Boolean) -> [*] -> [*] -> [*]' :
    'prefix': 'rai_unionWith_doc'
    'body': """
    //UnionWith :: (a -> a -> Boolean) -> [*] -> [*] -> [*]
    import UnionWith from 'ramda/unionWith';

    """
  'ES6 import Ramda/whereEq
    WhereEq :: {String: *} -> {String: *} -> Boolean' :
    'prefix': 'rai_whereEq_doc'
    'body': """
    //WhereEq :: {String: *} -> {String: *} -> Boolean
    import WhereEq from 'ramda/whereEq';

    """
  'ES6 import Ramda/allPass
    AllPass :: [(*... -> Boolean)] -> (*... -> Boolean)' :
    'prefix': 'rai_allPass_doc'
    'body': """
    //AllPass :: [(*... -> Boolean)] -> (*... -> Boolean)
    import AllPass from 'ramda/allPass';

    """
  'ES6 import Ramda/allUniq
    AllUniq :: [a] -> Boolean' :
    'prefix': 'rai_allUniq_doc'
    'body': """
    //AllUniq :: [a] -> Boolean
    import AllUniq from 'ramda/allUniq';

    """
  'ES6 import Ramda/anyPass
    AnyPass :: [(*... -> Boolean)] -> (*... -> Boolean)' :
    'prefix': 'rai_anyPass_doc'
    'body': """
    //AnyPass :: [(*... -> Boolean)] -> (*... -> Boolean)
    import AnyPass from 'ramda/anyPass';

    """
  'ES6 import Ramda/ap
    Ap :: [f] -> [a] -> [f a]' :
    'prefix': 'rai_ap_doc'
    'body': """
    //Ap :: [f] -> [a] -> [f a]
    import Ap from 'ramda/ap';

    """
  'ES6 import Ramda/applySpec
    ApplySpec :: {k: ((a  b  ...  m) -> v)} -> ((a  b  ...  m) -> {k: v})' :
    'prefix': 'rai_applySpec_doc'
    'body': """
    //ApplySpec :: {k: ((a  b  ...  m) -> v)} -> ((a  b  ...  m) -> {k: v})
    import ApplySpec from 'ramda/applySpec';

    """
  'ES6 import Ramda/call
    Call :: (*... -> a) *... -> a' :
    'prefix': 'rai_call_doc'
    'body': """
    //Call :: (*... -> a) *... -> a
    import Call from 'ramda/call';

    """
  'ES6 import Ramda/chain
    Chain :: (a -> [b]) -> [a] -> [b]' :
    'prefix': 'rai_chain_doc'
    'body': """
    //Chain :: (a -> [b]) -> [a] -> [b]
    import Chain from 'ramda/chain';

    """
  'ES6 import Ramda/cond
    Cond :: [[(*... -> Boolean) (*... -> *)]] -> (*... -> *)' :
    'prefix': 'rai_cond_doc'
    'body': """
    //Cond :: [[(*... -> Boolean) (*... -> *)]] -> (*... -> *)
    import Cond from 'ramda/cond';

    """
  'ES6 import Ramda/constructN
    ConstructN :: Number -> (* -> {*}) -> (* -> {*})' :
    'prefix': 'rai_constructN_doc'
    'body': """
    //ConstructN :: Number -> (* -> {*}) -> (* -> {*})
    import ConstructN from 'ramda/constructN';

    """
  'ES6 import Ramda/converge
    Converge :: (x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1)  (a -> b -> ... -> x2)  ...] -> (a -> b -> ... -> z)' :
    'prefix': 'rai_converge_doc'
    'body': """
    //Converge :: (x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1)  (a -> b -> ... -> x2)  ...] -> (a -> b -> ... -> z)
    import Converge from 'ramda/converge';

    """
  'ES6 import Ramda/countBy
    CountBy :: (a -> String) -> [a] -> {*}' :
    'prefix': 'rai_countBy_doc'
    'body': """
    //CountBy :: (a -> String) -> [a] -> {*}
    import CountBy from 'ramda/countBy';

    """
  'ES6 import Ramda/dropRepeatsWith
    DropRepeatsWith :: (a  a -> Boolean) -> [a] -> [a]' :
    'prefix': 'rai_dropRepeatsWith_doc'
    'body': """
    //DropRepeatsWith :: (a  a -> Boolean) -> [a] -> [a]
    import DropRepeatsWith from 'ramda/dropRepeatsWith';

    """
  'ES6 import Ramda/eqBy
    EqBy :: (a -> b) -> a -> a -> Boolean' :
    'prefix': 'rai_eqBy_doc'
    'body': """
    //EqBy :: (a -> b) -> a -> a -> Boolean
    import EqBy from 'ramda/eqBy';

    """
  'ES6 import Ramda/eqProps
    EqProps :: k -> {k: v} -> {k: v} -> Boolean' :
    'prefix': 'rai_eqProps_doc'
    'body': """
    //EqProps :: k -> {k: v} -> {k: v} -> Boolean
    import EqProps from 'ramda/eqProps';

    """
  'ES6 import Ramda/groupBy
    GroupBy :: (a -> String) -> [a] -> {String: [a]}' :
    'prefix': 'rai_groupBy_doc'
    'body': """
    //GroupBy :: (a -> String) -> [a] -> {String: [a]}
    import GroupBy from 'ramda/groupBy';

    """
  'ES6 import Ramda/indexBy
    IndexBy :: (a -> String) -> [{k: v}] -> {k: {k: v}}' :
    'prefix': 'rai_indexBy_doc'
    'body': """
    //IndexBy :: (a -> String) -> [{k: v}] -> {k: {k: v}}
    import IndexBy from 'ramda/indexBy';

    """
  'ES6 import Ramda/indexOf
    IndexOf :: a -> [a] -> Number' :
    'prefix': 'rai_indexOf_doc'
    'body': """
    //IndexOf :: a -> [a] -> Number
    import IndexOf from 'ramda/indexOf';

    """
  'ES6 import Ramda/juxt
    Juxt :: [(a  b  ...  m) -> n] -> ((a  b  ...  m) -> [n])' :
    'prefix': 'rai_juxt_doc'
    'body': """
    //Juxt :: [(a  b  ...  m) -> n] -> ((a  b  ...  m) -> [n])
    import Juxt from 'ramda/juxt';

    """
  'ES6 import Ramda/lens
    Lens :: (s -> a) -> ((a  s) -> s) -> Lens s a' :
    'prefix': 'rai_lens_doc'
    'body': """
    //Lens :: (s -> a) -> ((a  s) -> s) -> Lens s a
    import Lens from 'ramda/lens';

    """
  'ES6 import Ramda/lensIndex
    LensIndex :: Number -> Lens s a' :
    'prefix': 'rai_lensIndex_doc'
    'body': """
    //LensIndex :: Number -> Lens s a
    import LensIndex from 'ramda/lensIndex';

    """
  'ES6 import Ramda/lensPath
    LensPath :: [String] -> Lens s a' :
    'prefix': 'rai_lensPath_doc'
    'body': """
    //LensPath :: [String] -> Lens s a
    import LensPath from 'ramda/lensPath';

    """
  'ES6 import Ramda/lensProp
    LensProp :: String -> Lens s a' :
    'prefix': 'rai_lensProp_doc'
    'body': """
    //LensProp :: String -> Lens s a
    import LensProp from 'ramda/lensProp';

    """
  'ES6 import Ramda/liftN
    LiftN :: Number -> (*... -> *) -> ([*]... -> [*])' :
    'prefix': 'rai_liftN_doc'
    'body': """
    //LiftN :: Number -> (*... -> *) -> ([*]... -> [*])
    import LiftN from 'ramda/liftN';

    """
  'ES6 import Ramda/mean
    Mean :: [Number] -> Number' :
    'prefix': 'rai_mean_doc'
    'body': """
    //Mean :: [Number] -> Number
    import Mean from 'ramda/mean';

    """
  'ES6 import Ramda/median
    Median :: [Number] -> Number' :
    'prefix': 'rai_median_doc'
    'body': """
    //Median :: [Number] -> Number
    import Median from 'ramda/median';

    """
  'ES6 import Ramda/partition
    Partition :: Filterable f => (a -> Boolean) -> f a -> [f a  f a]' :
    'prefix': 'rai_partition_doc'
    'body': """
    //Partition :: Filterable f => (a -> Boolean) -> f a -> [f a  f a]
    import Partition from 'ramda/partition';

    """
  'ES6 import Ramda/pipe
    Pipe :: (((a  b  ...  n) -> o)  (o -> p)  ...  (x -> y)  (y -> z)) -> ((a  b  ...  n) -> z)' :
    'prefix': 'rai_pipe_doc'
    'body': """
    //Pipe :: (((a  b  ...  n) -> o)  (o -> p)  ...  (x -> y)  (y -> z)) -> ((a  b  ...  n) -> z)
    import Pipe from 'ramda/pipe';

    """
  'ES6 import Ramda/pipeP
    PipeP :: ((a -> Promise b)  (b -> Promise c)  ...  (y -> Promise z)) -> (a -> Promise z)' :
    'prefix': 'rai_pipeP_doc'
    'body': """
    //PipeP :: ((a -> Promise b)  (b -> Promise c)  ...  (y -> Promise z)) -> (a -> Promise z)
    import PipeP from 'ramda/pipeP';

    """
  'ES6 import Ramda/product
    Product :: [Number] -> Number' :
    'prefix': 'rai_product_doc'
    'body': """
    //Product :: [Number] -> Number
    import Product from 'ramda/product';

    """
  'ES6 import Ramda/sequence
    Sequence :: (Applicative f  Traversable t) => (a -> f a) -> t (f a) -> f (t a)' :
    'prefix': 'rai_sequence_doc'
    'body': """
    //Sequence :: (Applicative f  Traversable t) => (a -> f a) -> t (f a) -> f (t a)
    import Sequence from 'ramda/sequence';

    """
  'ES6 import Ramda/traverse
    Traverse :: (Applicative f  Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)' :
    'prefix': 'rai_traverse_doc'
    'body': """
    //Traverse :: (Applicative f  Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)
    import Traverse from 'ramda/traverse';

    """
  'ES6 import Ramda/unnest
    Unnest :: Chain c => c (c a) -> c a' :
    'prefix': 'rai_unnest_doc'
    'body': """
    //Unnest :: Chain c => c (c a) -> c a
    import Unnest from 'ramda/unnest';

    """
  'ES6 import Ramda/compose
    Compose :: ((y -> z)  (x -> y)  ...  (o -> p)  ((a  b  ...  n) -> o)) -> ((a  b  ...  n) -> z)' :
    'prefix': 'rai_compose_doc'
    'body': """
    //Compose :: ((y -> z)  (x -> y)  ...  (o -> p)  ((a  b  ...  n) -> o)) -> ((a  b  ...  n) -> z)
    import Compose from 'ramda/compose';

    """
  'ES6 import Ramda/composeK
    ComposeK :: Chain m => ((y -> m z)  (x -> m y)  ...  (a -> m b)) -> (m a -> m z)' :
    'prefix': 'rai_composeK_doc'
    'body': """
    //ComposeK :: Chain m => ((y -> m z)  (x -> m y)  ...  (a -> m b)) -> (m a -> m z)
    import ComposeK from 'ramda/composeK';

    """
  'ES6 import Ramda/composeP
    ComposeP :: ((y -> Promise z)  (x -> Promise y)  ...  (a -> Promise b)) -> (a -> Promise z)' :
    'prefix': 'rai_composeP_doc'
    'body': """
    //ComposeP :: ((y -> Promise z)  (x -> Promise y)  ...  (a -> Promise b)) -> (a -> Promise z)
    import ComposeP from 'ramda/composeP';

    """
  'ES6 import Ramda/construct
    Construct :: (* -> {*}) -> (* -> {*})' :
    'prefix': 'rai_construct_doc'
    'body': """
    //Construct :: (* -> {*}) -> (* -> {*})
    import Construct from 'ramda/construct';

    """
  'ES6 import Ramda/contains
    Contains :: a -> [a] -> Boolean' :
    'prefix': 'rai_contains_doc'
    'body': """
    //Contains :: a -> [a] -> Boolean
    import Contains from 'ramda/contains';

    """
  'ES6 import Ramda/difference
    Difference :: [*] -> [*] -> [*]' :
    'prefix': 'rai_difference_doc'
    'body': """
    //Difference :: [*] -> [*] -> [*]
    import Difference from 'ramda/difference';

    """
  'ES6 import Ramda/dropRepeats
    DropRepeats :: [a] -> [a]' :
    'prefix': 'rai_dropRepeats_doc'
    'body': """
    //DropRepeats :: [a] -> [a]
    import DropRepeats from 'ramda/dropRepeats';

    """
  'ES6 import Ramda/lift
    Lift :: (*... -> *) -> ([*]... -> [*])' :
    'prefix': 'rai_lift_doc'
    'body': """
    //Lift :: (*... -> *) -> ([*]... -> [*])
    import Lift from 'ramda/lift';

    """
  'ES6 import Ramda/omit
    Omit :: [String] -> {String: *} -> {String: *}' :
    'prefix': 'rai_omit_doc'
    'body': """
    //Omit :: [String] -> {String: *} -> {String: *}
    import Omit from 'ramda/omit';

    """
  'ES6 import Ramda/pipeK
    PipeK :: Chain m => ((a -> m b)  (b -> m c)  ...  (y -> m z)) -> (m a -> m z)' :
    'prefix': 'rai_pipeK_doc'
    'body': """
    //PipeK :: Chain m => ((a -> m b)  (b -> m c)  ...  (y -> m z)) -> (m a -> m z)
    import PipeK from 'ramda/pipeK';

    """
  'ES6 import Ramda/toString
    ToString :: * -> String' :
    'prefix': 'rai_toString_doc'
    'body': """
    //ToString :: * -> String
    import ToString from 'ramda/toString';

    """
  'ES6 import Ramda/without
    Without :: [a] -> [a] -> [a]' :
    'prefix': 'rai_without_doc'
    'body': """
    //Without :: [a] -> [a] -> [a]
    import Without from 'ramda/without';

    """
  'ES6 import Ramda/both
    Both :: (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)' :
    'prefix': 'rai_both_doc'
    'body': """
    //Both :: (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
    import Both from 'ramda/both';

    """
  'ES6 import Ramda/complement
    Complement :: (*... -> *) -> (*... -> Boolean)' :
    'prefix': 'rai_complement_doc'
    'body': """
    //Complement :: (*... -> *) -> (*... -> Boolean)
    import Complement from 'ramda/complement';

    """
  'ES6 import Ramda/either
    Either :: (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)' :
    'prefix': 'rai_either_doc'
    'body': """
    //Either :: (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
    import Either from 'ramda/either';

    """
  'ES6 import Ramda/invoker
    Invoker :: Number -> String -> (a -> b -> ... -> n -> Object -> *)' :
    'prefix': 'rai_invoker_doc'
    'body': """
    //Invoker :: Number -> String -> (a -> b -> ... -> n -> Object -> *)
    import Invoker from 'ramda/invoker';

    """
  'ES6 import Ramda/join
    Join :: String -> [a] -> String' :
    'prefix': 'rai_join_doc'
    'body': """
    //Join :: String -> [a] -> String
    import Join from 'ramda/join';

    """
  'ES6 import Ramda/memoize
    Memoize :: (*... -> a) -> (*... -> a)' :
    'prefix': 'rai_memoize_doc'
    'body': """
    //Memoize :: (*... -> a) -> (*... -> a)
    import Memoize from 'ramda/memoize';

    """
  'ES6 import Ramda/split
    Split :: (String | RegExp) -> String -> [String]' :
    'prefix': 'rai_split_doc'
    'body': """
    //Split :: (String | RegExp) -> String -> [String]
    import Split from 'ramda/split';

    """
  'ES6 import Ramda/test
    Test :: RegExp -> String -> Boolean' :
    'prefix': 'rai_test_doc'
    'body': """
    //Test :: RegExp -> String -> Boolean
    import Test from 'ramda/test';

    """
  'ES6 import Ramda/toLower
    ToLower :: String -> String' :
    'prefix': 'rai_toLower_doc'
    'body': """
    //ToLower :: String -> String
    import ToLower from 'ramda/toLower';

    """
  'ES6 import Ramda/toUpper
    ToUpper :: String -> String' :
    'prefix': 'rai_toUpper_doc'
    'body': """
    //ToUpper :: String -> String
    import ToUpper from 'ramda/toUpper';

    """
  'ES6 import Ramda/uniqBy
    UniqBy :: (a -> b) -> [a] -> [a]' :
    'prefix': 'rai_uniqBy_doc'
    'body': """
    //UniqBy :: (a -> b) -> [a] -> [a]
    import UniqBy from 'ramda/uniqBy';

    """
  'ES6 import Ramda/concat
    Concat :: [a] -> [a] -> [a]' :
    'prefix': 'rai_concat_doc'
    'body': """
    //Concat :: [a] -> [a] -> [a]
    import Concat from 'ramda/concat';

    """
  'ES6 import Ramda/symmetricDifference
    SymmetricDifference :: [*] -> [*] -> [*]' :
    'prefix': 'rai_symmetricDifference_doc'
    'body': """
    //SymmetricDifference :: [*] -> [*] -> [*]
    import SymmetricDifference from 'ramda/symmetricDifference';

    """
  'ES6 import Ramda/symmetricDifferenceWith
    SymmetricDifferenceWith :: (a -> a -> Boolean) -> [a] -> [a] -> [a]' :
    'prefix': 'rai_symmetricDifferenceWith_doc'
    'body': """
    //SymmetricDifferenceWith :: (a -> a -> Boolean) -> [a] -> [a] -> [a]
    import SymmetricDifferenceWith from 'ramda/symmetricDifferenceWith';

    """
  'ES6 import Ramda/uniq
    Uniq :: [a] -> [a]' :
    'prefix': 'rai_uniq_doc'
    'body': """
    //Uniq :: [a] -> [a]
    import Uniq from 'ramda/uniq';

    """
  'ES6 import Ramda/intersection
    Intersection :: [*] -> [*] -> [*]' :
    'prefix': 'rai_intersection_doc'
    'body': """
    //Intersection :: [*] -> [*] -> [*]
    import Intersection from 'ramda/intersection';

    """
  'ES6 import Ramda/union
    Union :: [*] -> [*] -> [*]' :
    'prefix': 'rai_union_doc'
    'body': """
    //Union :: [*] -> [*] -> [*]
    import Union from 'ramda/union';

    """
