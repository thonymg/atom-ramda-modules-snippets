'.source.js.jsx':
  '__ :: ' :
    'prefix': 'rav___'
    'body': """
    var __ = require('ramda/__');

    """
  'Add :: Number -> Number -> Number' :
    'prefix': 'rav_add'
    'body': """
    var Add = require('ramda/add');

    """
  'Adjust :: (a -> a) -> Number -> [a] -> [a]' :
    'prefix': 'rav_adjust'
    'body': """
    var Adjust = require('ramda/adjust');

    """
  'All :: (a -> Boolean) -> [a] -> Boolean' :
    'prefix': 'rav_all'
    'body': """
    var All = require('ramda/all');

    """
  'Always :: a -> (* -> a)' :
    'prefix': 'rav_always'
    'body': """
    var Always = require('ramda/always');

    """
  'And :: * -> * -> *' :
    'prefix': 'rav_and'
    'body': """
    var And = require('ramda/and');

    """
  'Any :: (a -> Boolean) -> [a] -> Boolean' :
    'prefix': 'rav_any'
    'body': """
    var Any = require('ramda/any');

    """
  'Aperture :: Number -> [a] -> [[a]]' :
    'prefix': 'rav_aperture'
    'body': """
    var Aperture = require('ramda/aperture');

    """
  'Append :: a -> [a] -> [a]' :
    'prefix': 'rav_append'
    'body': """
    var Append = require('ramda/append');

    """
  'Apply :: (*... -> a) -> [*] -> a' :
    'prefix': 'rav_apply'
    'body': """
    var Apply = require('ramda/apply');

    """
  'Assoc :: String -> a -> {k: v} -> {k: v}' :
    'prefix': 'rav_assoc'
    'body': """
    var Assoc = require('ramda/assoc');

    """
  'AssocPath :: [String] -> a -> {k: v} -> {k: v}' :
    'prefix': 'rav_assocPath'
    'body': """
    var AssocPath = require('ramda/assocPath');

    """
  'Bind :: (* -> *) -> {*} -> (* -> *)' :
    'prefix': 'rav_bind'
    'body': """
    var Bind = require('ramda/bind');

    """
  'Clamp :: Ord a => a -> a -> a -> a' :
    'prefix': 'rav_clamp'
    'body': """
    var Clamp = require('ramda/clamp');

    """
  'Comparator :: (a, b -> Boolean) -> (a, b -> Number)' :
    'prefix': 'rav_comparator'
    'body': """
    var Comparator = require('ramda/comparator');

    """
  'CurryN :: Number -> (* -> a) -> (* -> a)' :
    'prefix': 'rav_curryN'
    'body': """
    var CurryN = require('ramda/curryN');

    """
  'Dec :: Number -> Number' :
    'prefix': 'rav_dec'
    'body': """
    var Dec = require('ramda/dec');

    """
  'DefaultTo :: a -> b -> a | b' :
    'prefix': 'rav_defaultTo'
    'body': """
    var DefaultTo = require('ramda/defaultTo');

    """
  'DifferenceWith :: (a -> a -> Boolean) -> [*] -> [*] -> [*]' :
    'prefix': 'rav_differenceWith'
    'body': """
    var DifferenceWith = require('ramda/differenceWith');

    """
  'Dissoc :: String -> {k: v} -> {k: v}' :
    'prefix': 'rav_dissoc'
    'body': """
    var Dissoc = require('ramda/dissoc');

    """
  'DissocPath :: [String] -> {k: v} -> {k: v}' :
    'prefix': 'rav_dissocPath'
    'body': """
    var DissocPath = require('ramda/dissocPath');

    """
  'Divide :: Number -> Number -> Number' :
    'prefix': 'rav_divide'
    'body': """
    var Divide = require('ramda/divide');

    """
  'DropWhile :: (a -> Boolean) -> [a] -> [a]' :
    'prefix': 'rav_dropWhile'
    'body': """
    var DropWhile = require('ramda/dropWhile');

    """
  'Empty :: a -> a' :
    'prefix': 'rav_empty'
    'body': """
    var Empty = require('ramda/empty');

    """
  'Evolve :: {k: (v -> v)} -> {k: v} -> {k: v}' :
    'prefix': 'rav_evolve'
    'body': """
    var Evolve = require('ramda/evolve');

    """
  'Find :: (a -> Boolean) -> [a] -> a | undefined' :
    'prefix': 'rav_find'
    'body': """
    var Find = require('ramda/find');

    """
  'FindIndex :: (a -> Boolean) -> [a] -> Number' :
    'prefix': 'rav_findIndex'
    'body': """
    var FindIndex = require('ramda/findIndex');

    """
  'FindLast :: (a -> Boolean) -> [a] -> a | undefined' :
    'prefix': 'rav_findLast'
    'body': """
    var FindLast = require('ramda/findLast');

    """
  'FindLastIndex :: (a -> Boolean) -> [a] -> Number' :
    'prefix': 'rav_findLastIndex'
    'body': """
    var FindLastIndex = require('ramda/findLastIndex');

    """
  'ForEach :: (a -> *) -> [a] -> [a]' :
    'prefix': 'rav_forEach'
    'body': """
    var ForEach = require('ramda/forEach');

    """
  'FromPairs :: [[k,v]] -> {k: v}' :
    'prefix': 'rav_fromPairs'
    'body': """
    var FromPairs = require('ramda/fromPairs');

    """
  'GroupWith :: (a, a -> Boolean) -> [a] -> [[a]]' :
    'prefix': 'rav_groupWith'
    'body': """
    var GroupWith = require('ramda/groupWith');

    """
  'Gt :: Ord a => a -> a -> Boolean' :
    'prefix': 'rav_gt'
    'body': """
    var Gt = require('ramda/gt');

    """
  'Gte :: Ord a => a -> a -> Boolean' :
    'prefix': 'rav_gte'
    'body': """
    var Gte = require('ramda/gte');

    """
  'Has :: s -> {s: x} -> Boolean' :
    'prefix': 'rav_has'
    'body': """
    var Has = require('ramda/has');

    """
  'HasIn :: s -> {s: x} -> Boolean' :
    'prefix': 'rav_hasIn'
    'body': """
    var HasIn = require('ramda/hasIn');

    """
  'Identical :: a -> a -> Boolean' :
    'prefix': 'rav_identical'
    'body': """
    var Identical = require('ramda/identical');

    """
  'Identity :: a -> a' :
    'prefix': 'rav_identity'
    'body': """
    var Identity = require('ramda/identity');

    """
  'IfElse :: (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)' :
    'prefix': 'rav_ifElse'
    'body': """
    var IfElse = require('ramda/ifElse');

    """
  'Inc :: Number -> Number' :
    'prefix': 'rav_inc'
    'body': """
    var Inc = require('ramda/inc');

    """
  'Insert :: Number -> a -> [a] -> [a]' :
    'prefix': 'rav_insert'
    'body': """
    var Insert = require('ramda/insert');

    """
  'InsertAll :: Number -> [a] -> [a] -> [a]' :
    'prefix': 'rav_insertAll'
    'body': """
    var InsertAll = require('ramda/insertAll');

    """
  'Intersperse :: a -> [a] -> [a]' :
    'prefix': 'rav_intersperse'
    'body': """
    var Intersperse = require('ramda/intersperse');

    """
  'Is :: (* -> {*}) -> a -> Boolean' :
    'prefix': 'rav_is'
    'body': """
    var Is = require('ramda/is');

    """
  'IsArrayLike :: * -> Boolean' :
    'prefix': 'rav_isArrayLike'
    'body': """
    var IsArrayLike = require('ramda/isArrayLike');

    """
  'IsNil :: * -> Boolean' :
    'prefix': 'rav_isNil'
    'body': """
    var IsNil = require('ramda/isNil');

    """
  'Keys :: {k: v} -> [k]' :
    'prefix': 'rav_keys'
    'body': """
    var Keys = require('ramda/keys');

    """
  'KeysIn :: {k: v} -> [k]' :
    'prefix': 'rav_keysIn'
    'body': """
    var KeysIn = require('ramda/keysIn');

    """
  'Length :: [a] -> Number' :
    'prefix': 'rav_length'
    'body': """
    var Length = require('ramda/length');

    """
  'Lt :: Ord a => a -> a -> Boolean' :
    'prefix': 'rav_lt'
    'body': """
    var Lt = require('ramda/lt');

    """
  'Lte :: Ord a => a -> a -> Boolean' :
    'prefix': 'rav_lte'
    'body': """
    var Lte = require('ramda/lte');

    """
  'MapAccum :: (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])' :
    'prefix': 'rav_mapAccum'
    'body': """
    var MapAccum = require('ramda/mapAccum');

    """
  'MapAccumRight :: (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])' :
    'prefix': 'rav_mapAccumRight'
    'body': """
    var MapAccumRight = require('ramda/mapAccumRight');

    """
  'Match :: RegExp -> String -> [String | Undefined]' :
    'prefix': 'rav_match'
    'body': """
    var Match = require('ramda/match');

    """
  'MathMod :: Number -> Number -> Number' :
    'prefix': 'rav_mathMod'
    'body': """
    var MathMod = require('ramda/mathMod');

    """
  'Max :: Ord a => a -> a -> a' :
    'prefix': 'rav_max'
    'body': """
    var Max = require('ramda/max');

    """
  'MaxBy :: Ord b => (a -> b) -> a -> a -> a' :
    'prefix': 'rav_maxBy'
    'body': """
    var MaxBy = require('ramda/maxBy');

    """
  'Merge :: {k: v} -> {k: v} -> {k: v}' :
    'prefix': 'rav_merge'
    'body': """
    var Merge = require('ramda/merge');

    """
  'MergeAll :: [{k: v}] -> {k: v}' :
    'prefix': 'rav_mergeAll'
    'body': """
    var MergeAll = require('ramda/mergeAll');

    """
  'MergeWithKey :: (String -> a -> a -> a) -> {a} -> {a} -> {a}' :
    'prefix': 'rav_mergeWithKey'
    'body': """
    var MergeWithKey = require('ramda/mergeWithKey');

    """
  'Min :: Ord a => a -> a -> a' :
    'prefix': 'rav_min'
    'body': """
    var Min = require('ramda/min');

    """
  'MinBy :: Ord b => (a -> b) -> a -> a -> a' :
    'prefix': 'rav_minBy'
    'body': """
    var MinBy = require('ramda/minBy');

    """
  'Modulo :: Number -> Number -> Number' :
    'prefix': 'rav_modulo'
    'body': """
    var Modulo = require('ramda/modulo');

    """
  'Multiply :: Number -> Number -> Number' :
    'prefix': 'rav_multiply'
    'body': """
    var Multiply = require('ramda/multiply');

    """
  'NAry :: Number -> (* -> a) -> (* -> a)' :
    'prefix': 'rav_nAry'
    'body': """
    var NAry = require('ramda/nAry');

    """
  'Negate :: Number -> Number' :
    'prefix': 'rav_negate'
    'body': """
    var Negate = require('ramda/negate');

    """
  'None :: (a -> Boolean) -> [a] -> Boolean' :
    'prefix': 'rav_none'
    'body': """
    var None = require('ramda/none');

    """
  'Not :: * -> Boolean' :
    'prefix': 'rav_not'
    'body': """
    var Not = require('ramda/not');

    """
  'Nth :: Number -> [a] -> a | Undefined' :
    'prefix': 'rav_nth'
    'body': """
    var Nth = require('ramda/nth');

    """
  'NthArg :: Number -> *... -> *' :
    'prefix': 'rav_nthArg'
    'body': """
    var NthArg = require('ramda/nthArg');

    """
  'ObjOf :: String -> a -> {String:a}' :
    'prefix': 'rav_objOf'
    'body': """
    var ObjOf = require('ramda/objOf');

    """
  'Of :: a -> [a]' :
    'prefix': 'rav_of'
    'body': """
    var Of = require('ramda/of');

    """
  'Once :: (a... -> b) -> (a... -> b)' :
    'prefix': 'rav_once'
    'body': """
    var Once = require('ramda/once');

    """
  'Or :: * -> * -> *' :
    'prefix': 'rav_or'
    'body': """
    var Or = require('ramda/or');

    """
  'Over :: Lens s a -> (a -> a) -> s -> s' :
    'prefix': 'rav_over'
    'body': """
    var Over = require('ramda/over');

    """
  'Pair :: a -> b -> (a,b)' :
    'prefix': 'rav_pair'
    'body': """
    var Pair = require('ramda/pair');

    """
  'Path :: [String] -> {k: v} -> v | Undefined' :
    'prefix': 'rav_path'
    'body': """
    var Path = require('ramda/path');

    """
  'PathOr :: a -> [String] -> Object -> a' :
    'prefix': 'rav_pathOr'
    'body': """
    var PathOr = require('ramda/pathOr');

    """
  'PathSatisfies :: (a -> Boolean) -> [String] -> Object -> Boolean' :
    'prefix': 'rav_pathSatisfies'
    'body': """
    var PathSatisfies = require('ramda/pathSatisfies');

    """
  'Pick :: [k] -> {k: v} -> {k: v}' :
    'prefix': 'rav_pick'
    'body': """
    var Pick = require('ramda/pick');

    """
  'PickAll :: [k] -> {k: v} -> {k: v}' :
    'prefix': 'rav_pickAll'
    'body': """
    var PickAll = require('ramda/pickAll');

    """
  'PickBy :: (v, k -> Boolean) -> {k: v} -> {k: v}' :
    'prefix': 'rav_pickBy'
    'body': """
    var PickBy = require('ramda/pickBy');

    """
  'Prepend :: a -> [a] -> [a]' :
    'prefix': 'rav_prepend'
    'body': """
    var Prepend = require('ramda/prepend');

    """
  'Prop :: s -> {s: a} -> a | Undefined' :
    'prefix': 'rav_prop'
    'body': """
    var Prop = require('ramda/prop');

    """
  'PropOr :: a -> String -> Object -> a' :
    'prefix': 'rav_propOr'
    'body': """
    var PropOr = require('ramda/propOr');

    """
  'PropSatisfies :: (a -> Boolean) -> String -> {String: a} -> Boolean' :
    'prefix': 'rav_propSatisfies'
    'body': """
    var PropSatisfies = require('ramda/propSatisfies');

    """
  'Props :: [k] -> {k: v} -> [v]' :
    'prefix': 'rav_props'
    'body': """
    var Props = require('ramda/props');

    """
  'Range :: Number -> Number -> [Number]' :
    'prefix': 'rav_range'
    'body': """
    var Range = require('ramda/range');

    """
  'ReduceRight :: (a,b -> a) -> a -> [b] -> a' :
    'prefix': 'rav_reduceRight'
    'body': """
    var ReduceRight = require('ramda/reduceRight');

    """
  'Reduced :: a -> *' :
    'prefix': 'rav_reduced'
    'body': """
    var Reduced = require('ramda/reduced');

    """
  'Remove :: Number -> Number -> [a] -> [a]' :
    'prefix': 'rav_remove'
    'body': """
    var Remove = require('ramda/remove');

    """
  'Replace :: RegExp|String -> String -> String -> String' :
    'prefix': 'rav_replace'
    'body': """
    var Replace = require('ramda/replace');

    """
  'Reverse :: [a] -> [a]' :
    'prefix': 'rav_reverse'
    'body': """
    var Reverse = require('ramda/reverse');

    """
  'Scan :: (a,b -> a) -> a -> [b] -> [a]' :
    'prefix': 'rav_scan'
    'body': """
    var Scan = require('ramda/scan');

    """
  'Set :: Lens s a -> a -> s -> s' :
    'prefix': 'rav_set'
    'body': """
    var Set = require('ramda/set');

    """
  'Slice :: Number -> Number -> [a] -> [a]' :
    'prefix': 'rav_slice'
    'body': """
    var Slice = require('ramda/slice');

    """
  'Sort :: (a,a -> Number) -> [a] -> [a]' :
    'prefix': 'rav_sort'
    'body': """
    var Sort = require('ramda/sort');

    """
  'SortBy :: Ord b => (a -> b) -> [a] -> [a]' :
    'prefix': 'rav_sortBy'
    'body': """
    var SortBy = require('ramda/sortBy');

    """
  'SplitAt :: Number -> [a] -> [[a], [a]]' :
    'prefix': 'rav_splitAt'
    'body': """
    var SplitAt = require('ramda/splitAt');

    """
  'SplitEvery :: Number -> [a] -> [[a]]' :
    'prefix': 'rav_splitEvery'
    'body': """
    var SplitEvery = require('ramda/splitEvery');

    """
  'SplitWhen :: (a -> Boolean) -> [a] -> [[a], [a]]' :
    'prefix': 'rav_splitWhen'
    'body': """
    var SplitWhen = require('ramda/splitWhen');

    """
  'Subtract :: Number -> Number -> Number' :
    'prefix': 'rav_subtract'
    'body': """
    var Subtract = require('ramda/subtract');

    """
  'Tail :: [a] -> [a]' :
    'prefix': 'rav_tail'
    'body': """
    var Tail = require('ramda/tail');

    """
  'Take :: Number -> [a] -> [a]' :
    'prefix': 'rav_take'
    'body': """
    var Take = require('ramda/take');

    """
  'TakeLastWhile :: (a -> Boolean) -> [a] -> [a]' :
    'prefix': 'rav_takeLastWhile'
    'body': """
    var TakeLastWhile = require('ramda/takeLastWhile');

    """
  'TakeWhile :: (a -> Boolean) -> [a] -> [a]' :
    'prefix': 'rav_takeWhile'
    'body': """
    var TakeWhile = require('ramda/takeWhile');

    """
  'Tap :: (a -> *) -> a -> a' :
    'prefix': 'rav_tap'
    'body': """
    var Tap = require('ramda/tap');

    """
  'Times :: (Number -> a) -> Number -> [a]' :
    'prefix': 'rav_times'
    'body': """
    var Times = require('ramda/times');

    """
  'ToPairs :: {String: *} -> [[String,*]]' :
    'prefix': 'rav_toPairs'
    'body': """
    var ToPairs = require('ramda/toPairs');

    """
  'ToPairsIn :: {String: *} -> [[String,*]]' :
    'prefix': 'rav_toPairsIn'
    'body': """
    var ToPairsIn = require('ramda/toPairsIn');

    """
  'Transpose :: [[a]] -> [[a]]' :
    'prefix': 'rav_transpose'
    'body': """
    var Transpose = require('ramda/transpose');

    """
  'Trim :: String -> String' :
    'prefix': 'rav_trim'
    'body': """
    var Trim = require('ramda/trim');

    """
  'TryCatch :: (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)' :
    'prefix': 'rav_tryCatch'
    'body': """
    var TryCatch = require('ramda/tryCatch');

    """
  'Type :: (* -> {*}) -> String' :
    'prefix': 'rav_type'
    'body': """
    var Type = require('ramda/type');

    """
  'Unapply :: ([*...] -> a) -> (*... -> a)' :
    'prefix': 'rav_unapply'
    'body': """
    var Unapply = require('ramda/unapply');

    """
  'Unary :: (* -> b) -> (a -> b)' :
    'prefix': 'rav_unary'
    'body': """
    var Unary = require('ramda/unary');

    """
  'UncurryN :: Number -> (a -> b) -> (a -> c)' :
    'prefix': 'rav_uncurryN'
    'body': """
    var UncurryN = require('ramda/uncurryN');

    """
  'Unfold :: (a -> [b]) -> * -> [b]' :
    'prefix': 'rav_unfold'
    'body': """
    var Unfold = require('ramda/unfold');

    """
  'UniqWith :: (a, a -> Boolean) -> [a] -> [a]' :
    'prefix': 'rav_uniqWith'
    'body': """
    var UniqWith = require('ramda/uniqWith');

    """
  'Unless :: (a -> Boolean) -> (a -> a) -> a -> a' :
    'prefix': 'rav_unless'
    'body': """
    var Unless = require('ramda/unless');

    """
  'Until :: (a -> Boolean) -> (a -> a) -> a -> a' :
    'prefix': 'rav_until'
    'body': """
    var Until = require('ramda/until');

    """
  'Update :: Number -> a -> [a] -> [a]' :
    'prefix': 'rav_update'
    'body': """
    var Update = require('ramda/update');

    """
  'UseWith :: (x1 -> x2 -> ... -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)' :
    'prefix': 'rav_useWith'
    'body': """
    var UseWith = require('ramda/useWith');

    """
  'Values :: {k: v} -> [v]' :
    'prefix': 'rav_values'
    'body': """
    var Values = require('ramda/values');

    """
  'ValuesIn :: {k: v} -> [v]' :
    'prefix': 'rav_valuesIn'
    'body': """
    var ValuesIn = require('ramda/valuesIn');

    """
  'View :: Lens s a -> s -> a' :
    'prefix': 'rav_view'
    'body': """
    var View = require('ramda/view');

    """
  'When :: (a -> Boolean) -> (a -> a) -> a -> a' :
    'prefix': 'rav_when'
    'body': """
    var When = require('ramda/when');

    """
  'Where :: {String: (* -> Boolean)} -> {String: *} -> Boolean' :
    'prefix': 'rav_where'
    'body': """
    var Where = require('ramda/where');

    """
  'Wrap :: (a... -> b) -> ((a... -> b) -> a... -> c) -> (a... -> c)' :
    'prefix': 'rav_wrap'
    'body': """
    var Wrap = require('ramda/wrap');

    """
  'Xprod :: [a] -> [b] -> [[a,b]]' :
    'prefix': 'rav_xprod'
    'body': """
    var Xprod = require('ramda/xprod');

    """
  'Zip :: [a] -> [b] -> [[a,b]]' :
    'prefix': 'rav_zip'
    'body': """
    var Zip = require('ramda/zip');

    """
  'ZipObj :: [String] -> [*] -> {String: *}' :
    'prefix': 'rav_zipObj'
    'body': """
    var ZipObj = require('ramda/zipObj');

    """
  'ZipWith :: (a,b -> c) -> [a] -> [b] -> [c]' :
    'prefix': 'rav_zipWith'
    'body': """
    var ZipWith = require('ramda/zipWith');

    """
  'F :: * -> Boolean' :
    'prefix': 'rav_F'
    'body': """
    var F = require('ramda/F');

    """
  'T :: * -> Boolean' :
    'prefix': 'rav_T'
    'body': """
    var T = require('ramda/T');

    """
  'AddIndex :: ((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)' :
    'prefix': 'rav_addIndex'
    'body': """
    var AddIndex = require('ramda/addIndex');

    """
  'Binary :: (* -> c) -> (a, b -> c)' :
    'prefix': 'rav_binary'
    'body': """
    var Binary = require('ramda/binary');

    """
  'Clone :: {*} -> {*}' :
    'prefix': 'rav_clone'
    'body': """
    var Clone = require('ramda/clone');

    """
  'Curry :: (* -> a) -> (* -> a)' :
    'prefix': 'rav_curry'
    'body': """
    var Curry = require('ramda/curry');

    """
  'Drop :: Number -> [a] -> [a]' :
    'prefix': 'rav_drop'
    'body': """
    var Drop = require('ramda/drop');

    """
  'DropLast :: Number -> [a] -> [a]' :
    'prefix': 'rav_dropLast'
    'body': """
    var DropLast = require('ramda/dropLast');

    """
  'DropLastWhile :: (a -> Boolean) -> [a] -> [a]' :
    'prefix': 'rav_dropLastWhile'
    'body': """
    var DropLastWhile = require('ramda/dropLastWhile');

    """
  'Equals :: a -> b -> Boolean' :
    'prefix': 'rav_equals'
    'body': """
    var Equals = require('ramda/equals');

    """
  'Filter :: Filterable f => (a -> Boolean) -> f a -> f a' :
    'prefix': 'rav_filter'
    'body': """
    var Filter = require('ramda/filter');

    """
  'Flatten :: [a] -> [b]' :
    'prefix': 'rav_flatten'
    'body': """
    var Flatten = require('ramda/flatten');

    """
  'Flip :: (a -> b -> c -> ... -> z) -> (b -> a -> c -> ... -> z)' :
    'prefix': 'rav_flip'
    'body': """
    var Flip = require('ramda/flip');

    """
  'Head :: [a] -> a | Undefined' :
    'prefix': 'rav_head'
    'body': """
    var Head = require('ramda/head');

    """
  'Init :: [a] -> [a]' :
    'prefix': 'rav_init'
    'body': """
    var Init = require('ramda/init');

    """
  'IntersectionWith :: (a -> a -> Boolean) -> [*] -> [*] -> [*]' :
    'prefix': 'rav_intersectionWith'
    'body': """
    var IntersectionWith = require('ramda/intersectionWith');

    """
  'Into :: a -> (b -> b) -> [c] -> a' :
    'prefix': 'rav_into'
    'body': """
    var Into = require('ramda/into');

    """
  'Invert :: {s: x} -> {x: [ s, ... ]}' :
    'prefix': 'rav_invert'
    'body': """
    var Invert = require('ramda/invert');

    """
  'InvertObj :: {s: x} -> {x: s}' :
    'prefix': 'rav_invertObj'
    'body': """
    var InvertObj = require('ramda/invertObj');

    """
  'IsEmpty :: a -> Boolean' :
    'prefix': 'rav_isEmpty'
    'body': """
    var IsEmpty = require('ramda/isEmpty');

    """
  'Last :: [a] -> a | Undefined' :
    'prefix': 'rav_last'
    'body': """
    var Last = require('ramda/last');

    """
  'LastIndexOf :: a -> [a] -> Number' :
    'prefix': 'rav_lastIndexOf'
    'body': """
    var LastIndexOf = require('ramda/lastIndexOf');

    """
  'Map :: Functor f => (a -> b) -> f a -> f b' :
    'prefix': 'rav_map'
    'body': """
    var Map = require('ramda/map');

    """
  'MapObjIndexed :: ((*, String, Object) -> *) -> Object -> Object' :
    'prefix': 'rav_mapObjIndexed'
    'body': """
    var MapObjIndexed = require('ramda/mapObjIndexed');

    """
  'MergeWith :: (a -> a -> a) -> {a} -> {a} -> {a}' :
    'prefix': 'rav_mergeWith'
    'body': """
    var MergeWith = require('ramda/mergeWith');

    """
  'Partial :: ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)' :
    'prefix': 'rav_partial'
    'body': """
    var Partial = require('ramda/partial');

    """
  'PartialRight :: ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)' :
    'prefix': 'rav_partialRight'
    'body': """
    var PartialRight = require('ramda/partialRight');

    """
  'PathEq :: [String] -> * -> {String: *} -> Boolean' :
    'prefix': 'rav_pathEq'
    'body': """
    var PathEq = require('ramda/pathEq');

    """
  'Pluck :: k -> [{k: v}] -> [v]' :
    'prefix': 'rav_pluck'
    'body': """
    var Pluck = require('ramda/pluck');

    """
  'Project :: [k] -> [{k: v}] -> [{k: v}]' :
    'prefix': 'rav_project'
    'body': """
    var Project = require('ramda/project');

    """
  'PropEq :: String -> a -> Object -> Boolean' :
    'prefix': 'rav_propEq'
    'body': """
    var PropEq = require('ramda/propEq');

    """
  'PropIs :: Type -> String -> Object -> Boolean' :
    'prefix': 'rav_propIs'
    'body': """
    var PropIs = require('ramda/propIs');

    """
  'Reduce :: ((a, b) -> a) -> a -> [b] -> a' :
    'prefix': 'rav_reduce'
    'body': """
    var Reduce = require('ramda/reduce');

    """
  'ReduceBy :: ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}' :
    'prefix': 'rav_reduceBy'
    'body': """
    var ReduceBy = require('ramda/reduceBy');

    """
  'Reject :: Filterable f => (a -> Boolean) -> f a -> f a' :
    'prefix': 'rav_reject'
    'body': """
    var Reject = require('ramda/reject');

    """
  'Repeat :: a -> n -> [a]' :
    'prefix': 'rav_repeat'
    'body': """
    var Repeat = require('ramda/repeat');

    """
  'Sum :: [Number] -> Number' :
    'prefix': 'rav_sum'
    'body': """
    var Sum = require('ramda/sum');

    """
  'TakeLast :: Number -> [a] -> [a]' :
    'prefix': 'rav_takeLast'
    'body': """
    var TakeLast = require('ramda/takeLast');

    """
  'Transduce :: (c -> c) -> (a,b -> a) -> a -> [b] -> a' :
    'prefix': 'rav_transduce'
    'body': """
    var Transduce = require('ramda/transduce');

    """
  'UnionWith :: (a -> a -> Boolean) -> [*] -> [*] -> [*]' :
    'prefix': 'rav_unionWith'
    'body': """
    var UnionWith = require('ramda/unionWith');

    """
  'WhereEq :: {String: *} -> {String: *} -> Boolean' :
    'prefix': 'rav_whereEq'
    'body': """
    var WhereEq = require('ramda/whereEq');

    """
  'AllPass :: [(*... -> Boolean)] -> (*... -> Boolean)' :
    'prefix': 'rav_allPass'
    'body': """
    var AllPass = require('ramda/allPass');

    """
  'AllUniq :: [a] -> Boolean' :
    'prefix': 'rav_allUniq'
    'body': """
    var AllUniq = require('ramda/allUniq');

    """
  'AnyPass :: [(*... -> Boolean)] -> (*... -> Boolean)' :
    'prefix': 'rav_anyPass'
    'body': """
    var AnyPass = require('ramda/anyPass');

    """
  'Ap :: [f] -> [a] -> [f a]' :
    'prefix': 'rav_ap'
    'body': """
    var Ap = require('ramda/ap');

    """
  'ApplySpec :: {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})' :
    'prefix': 'rav_applySpec'
    'body': """
    var ApplySpec = require('ramda/applySpec');

    """
  'Call :: (*... -> a),*... -> a' :
    'prefix': 'rav_call'
    'body': """
    var Call = require('ramda/call');

    """
  'Chain :: (a -> [b]) -> [a] -> [b]' :
    'prefix': 'rav_chain'
    'body': """
    var Chain = require('ramda/chain');

    """
  'Cond :: [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)' :
    'prefix': 'rav_cond'
    'body': """
    var Cond = require('ramda/cond');

    """
  'ConstructN :: Number -> (* -> {*}) -> (* -> {*})' :
    'prefix': 'rav_constructN'
    'body': """
    var ConstructN = require('ramda/constructN');

    """
  'Converge :: (x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1), (a -> b -> ... -> x2), ...] -> (a -> b -> ... -> z)' :
    'prefix': 'rav_converge'
    'body': """
    var Converge = require('ramda/converge');

    """
  'CountBy :: (a -> String) -> [a] -> {*}' :
    'prefix': 'rav_countBy'
    'body': """
    var CountBy = require('ramda/countBy');

    """
  'DropRepeatsWith :: (a, a -> Boolean) -> [a] -> [a]' :
    'prefix': 'rav_dropRepeatsWith'
    'body': """
    var DropRepeatsWith = require('ramda/dropRepeatsWith');

    """
  'EqBy :: (a -> b) -> a -> a -> Boolean' :
    'prefix': 'rav_eqBy'
    'body': """
    var EqBy = require('ramda/eqBy');

    """
  'EqProps :: k -> {k: v} -> {k: v} -> Boolean' :
    'prefix': 'rav_eqProps'
    'body': """
    var EqProps = require('ramda/eqProps');

    """
  'GroupBy :: (a -> String) -> [a] -> {String: [a]}' :
    'prefix': 'rav_groupBy'
    'body': """
    var GroupBy = require('ramda/groupBy');

    """
  'IndexBy :: (a -> String) -> [{k: v}] -> {k: {k: v}}' :
    'prefix': 'rav_indexBy'
    'body': """
    var IndexBy = require('ramda/indexBy');

    """
  'IndexOf :: a -> [a] -> Number' :
    'prefix': 'rav_indexOf'
    'body': """
    var IndexOf = require('ramda/indexOf');

    """
  'Juxt :: [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])' :
    'prefix': 'rav_juxt'
    'body': """
    var Juxt = require('ramda/juxt');

    """
  'Lens :: (s -> a) -> ((a, s) -> s) -> Lens s a' :
    'prefix': 'rav_lens'
    'body': """
    var Lens = require('ramda/lens');

    """
  'LensIndex :: Number -> Lens s a' :
    'prefix': 'rav_lensIndex'
    'body': """
    var LensIndex = require('ramda/lensIndex');

    """
  'LensPath :: [String] -> Lens s a' :
    'prefix': 'rav_lensPath'
    'body': """
    var LensPath = require('ramda/lensPath');

    """
  'LensProp :: String -> Lens s a' :
    'prefix': 'rav_lensProp'
    'body': """
    var LensProp = require('ramda/lensProp');

    """
  'LiftN :: Number -> (*... -> *) -> ([*]... -> [*])' :
    'prefix': 'rav_liftN'
    'body': """
    var LiftN = require('ramda/liftN');

    """
  'Mean :: [Number] -> Number' :
    'prefix': 'rav_mean'
    'body': """
    var Mean = require('ramda/mean');

    """
  'Median :: [Number] -> Number' :
    'prefix': 'rav_median'
    'body': """
    var Median = require('ramda/median');

    """
  'Partition :: Filterable f => (a -> Boolean) -> f a -> [f a, f a]' :
    'prefix': 'rav_partition'
    'body': """
    var Partition = require('ramda/partition');

    """
  'Pipe :: (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)' :
    'prefix': 'rav_pipe'
    'body': """
    var Pipe = require('ramda/pipe');

    """
  'PipeP :: ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)' :
    'prefix': 'rav_pipeP'
    'body': """
    var PipeP = require('ramda/pipeP');

    """
  'Product :: [Number] -> Number' :
    'prefix': 'rav_product'
    'body': """
    var Product = require('ramda/product');

    """
  'Sequence :: (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)' :
    'prefix': 'rav_sequence'
    'body': """
    var Sequence = require('ramda/sequence');

    """
  'Traverse :: (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)' :
    'prefix': 'rav_traverse'
    'body': """
    var Traverse = require('ramda/traverse');

    """
  'Unnest :: Chain c => c (c a) -> c a' :
    'prefix': 'rav_unnest'
    'body': """
    var Unnest = require('ramda/unnest');

    """
  'Compose :: ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)' :
    'prefix': 'rav_compose'
    'body': """
    var Compose = require('ramda/compose');

    """
  'ComposeK :: Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (m a -> m z)' :
    'prefix': 'rav_composeK'
    'body': """
    var ComposeK = require('ramda/composeK');

    """
  'ComposeP :: ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)' :
    'prefix': 'rav_composeP'
    'body': """
    var ComposeP = require('ramda/composeP');

    """
  'Construct :: (* -> {*}) -> (* -> {*})' :
    'prefix': 'rav_construct'
    'body': """
    var Construct = require('ramda/construct');

    """
  'Contains :: a -> [a] -> Boolean' :
    'prefix': 'rav_contains'
    'body': """
    var Contains = require('ramda/contains');

    """
  'Difference :: [*] -> [*] -> [*]' :
    'prefix': 'rav_difference'
    'body': """
    var Difference = require('ramda/difference');

    """
  'DropRepeats :: [a] -> [a]' :
    'prefix': 'rav_dropRepeats'
    'body': """
    var DropRepeats = require('ramda/dropRepeats');

    """
  'Lift :: (*... -> *) -> ([*]... -> [*])' :
    'prefix': 'rav_lift'
    'body': """
    var Lift = require('ramda/lift');

    """
  'Omit :: [String] -> {String: *} -> {String: *}' :
    'prefix': 'rav_omit'
    'body': """
    var Omit = require('ramda/omit');

    """
  'PipeK :: Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (m a -> m z)' :
    'prefix': 'rav_pipeK'
    'body': """
    var PipeK = require('ramda/pipeK');

    """
  'ToString :: * -> String' :
    'prefix': 'rav_toString'
    'body': """
    var ToString = require('ramda/toString');

    """
  'Without :: [a] -> [a] -> [a]' :
    'prefix': 'rav_without'
    'body': """
    var Without = require('ramda/without');

    """
  'Both :: (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)' :
    'prefix': 'rav_both'
    'body': """
    var Both = require('ramda/both');

    """
  'Complement :: (*... -> *) -> (*... -> Boolean)' :
    'prefix': 'rav_complement'
    'body': """
    var Complement = require('ramda/complement');

    """
  'Either :: (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)' :
    'prefix': 'rav_either'
    'body': """
    var Either = require('ramda/either');

    """
  'Invoker :: Number -> String -> (a -> b -> ... -> n -> Object -> *)' :
    'prefix': 'rav_invoker'
    'body': """
    var Invoker = require('ramda/invoker');

    """
  'Join :: String -> [a] -> String' :
    'prefix': 'rav_join'
    'body': """
    var Join = require('ramda/join');

    """
  'Memoize :: (*... -> a) -> (*... -> a)' :
    'prefix': 'rav_memoize'
    'body': """
    var Memoize = require('ramda/memoize');

    """
  'Split :: (String | RegExp) -> String -> [String]' :
    'prefix': 'rav_split'
    'body': """
    var Split = require('ramda/split');

    """
  'Test :: RegExp -> String -> Boolean' :
    'prefix': 'rav_test'
    'body': """
    var Test = require('ramda/test');

    """
  'ToLower :: String -> String' :
    'prefix': 'rav_toLower'
    'body': """
    var ToLower = require('ramda/toLower');

    """
  'ToUpper :: String -> String' :
    'prefix': 'rav_toUpper'
    'body': """
    var ToUpper = require('ramda/toUpper');

    """
  'UniqBy :: (a -> b) -> [a] -> [a]' :
    'prefix': 'rav_uniqBy'
    'body': """
    var UniqBy = require('ramda/uniqBy');

    """
  'Concat :: [a] -> [a] -> [a]' :
    'prefix': 'rav_concat'
    'body': """
    var Concat = require('ramda/concat');

    """
  'SymmetricDifference :: [*] -> [*] -> [*]' :
    'prefix': 'rav_symmetricDifference'
    'body': """
    var SymmetricDifference = require('ramda/symmetricDifference');

    """
  'SymmetricDifferenceWith :: (a -> a -> Boolean) -> [a] -> [a] -> [a]' :
    'prefix': 'rav_symmetricDifferenceWith'
    'body': """
    var SymmetricDifferenceWith = require('ramda/symmetricDifferenceWith');

    """
  'Uniq :: [a] -> [a]' :
    'prefix': 'rav_uniq'
    'body': """
    var Uniq = require('ramda/uniq');

    """
  'Intersection :: [*] -> [*] -> [*]' :
    'prefix': 'rav_intersection'
    'body': """
    var Intersection = require('ramda/intersection');

    """
  'Union :: [*] -> [*] -> [*]' :
    'prefix': 'rav_union'
    'body': """
    var Union = require('ramda/union');

    """
